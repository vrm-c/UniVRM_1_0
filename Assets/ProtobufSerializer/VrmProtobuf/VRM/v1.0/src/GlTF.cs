// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: glTF.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VrmProtobuf {

  /// <summary>Holder for reflection information generated from glTF.proto</summary>
  public static partial class GlTFReflection {

    #region Descriptor
    /// <summary>File descriptor for glTF.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GlTFReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpnbFRGLnByb3RvEgtWcm1Qcm90b2J1ZhoeZ29vZ2xlL3Byb3RvYnVmL3dy",
            "YXBwZXJzLnByb3RvGhpWUk1DX21hdGVyaWFsc19tdG9vbi5wcm90bxoVZ2xU",
            "Rl9leHRlbnNpb25zLnByb3RvIokFCgRnbFRGEhYKDmV4dGVuc2lvbnNVc2Vk",
            "GAEgAygJEhoKEmV4dGVuc2lvbnNSZXF1aXJlZBgCIAMoCRIoCglhY2Nlc3Nv",
            "cnMYAyADKAsyFS5Wcm1Qcm90b2J1Zi5BY2Nlc3NvchIqCgphbmltYXRpb25z",
            "GAQgAygLMhYuVnJtUHJvdG9idWYuQW5pbWF0aW9uEiEKBWFzc2V0GAUgASgL",
            "MhIuVnJtUHJvdG9idWYuQXNzZXQSJAoHYnVmZmVycxgGIAMoCzITLlZybVBy",
            "b3RvYnVmLkJ1ZmZlchIsCgtidWZmZXJWaWV3cxgHIAMoCzIXLlZybVByb3Rv",
            "YnVmLkJ1ZmZlclZpZXcSIgoGaW1hZ2VzGAggAygLMhIuVnJtUHJvdG9idWYu",
            "SW1hZ2USKAoJbWF0ZXJpYWxzGAkgAygLMhUuVnJtUHJvdG9idWYuTWF0ZXJp",
            "YWwSIQoGbWVzaGVzGAogAygLMhEuVnJtUHJvdG9idWYuTWVzaBIgCgVub2Rl",
            "cxgLIAMoCzIRLlZybVByb3RvYnVmLk5vZGUSJgoIc2FtcGxlcnMYDCADKAsy",
            "FC5Wcm1Qcm90b2J1Zi5TYW1wbGVyEioKBXNjZW5lGA0gASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDMyVmFsdWUSIgoGc2NlbmVzGA4gAygLMhIuVnJtUHJv",
            "dG9idWYuU2NlbmUSIAoFc2tpbnMYDyADKAsyES5Wcm1Qcm90b2J1Zi5Ta2lu",
            "EiYKCHRleHR1cmVzGBAgAygLMhQuVnJtUHJvdG9idWYuVGV4dHVyZRIrCgpl",
            "eHRlbnNpb25zGBEgASgLMhcuVnJtUHJvdG9idWYuRXh0ZW5zaW9ucyKlAgoI",
            "QWNjZXNzb3ISLwoKYnVmZmVyVmlldxgBIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQzMlZhbHVlEi8KCmJ5dGVPZmZzZXQYAiABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuSW50MzJWYWx1ZRIVCg1jb21wb25lbnRUeXBlGAMgASgFEi4KCm5v",
            "cm1hbGl6ZWQYBCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEg0K",
            "BWNvdW50GAUgASgFEgwKBHR5cGUYBiABKAkSCwoDbWF4GAcgAygCEgsKA21p",
            "bhgIIAMoAhIrCgZzcGFyc2UYCSABKAsyGy5Wcm1Qcm90b2J1Zi5BY2Nlc3Nv",
            "clNwYXJzZRIMCgRuYW1lGAogASgJIpABChVBY2Nlc3NvclNwYXJzZUluZGlj",
            "ZXMSLwoKYnVmZmVyVmlldxgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQz",
            "MlZhbHVlEi8KCmJ5dGVPZmZzZXQYAiABKAsyGy5nb29nbGUucHJvdG9idWYu",
            "SW50MzJWYWx1ZRIVCg1jb21wb25lbnRUeXBlGAMgASgFIocBCg5BY2Nlc3Nv",
            "clNwYXJzZRINCgVjb3VudBgBIAEoBRIzCgdpbmRpY2VzGAIgASgLMiIuVnJt",
            "UHJvdG9idWYuQWNjZXNzb3JTcGFyc2VJbmRpY2VzEjEKBnZhbHVlcxgDIAEo",
            "CzIhLlZybVByb3RvYnVmLkFjY2Vzc29yU3BhcnNlVmFsdWVzIngKFEFjY2Vz",
            "c29yU3BhcnNlVmFsdWVzEi8KCmJ1ZmZlclZpZXcYASABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50MzJWYWx1ZRIvCgpieXRlT2Zmc2V0GAIgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDMyVmFsdWUiUQoWQW5pbWF0aW9uQ2hhbm5lbFRh",
            "cmdldBIpCgRub2RlGAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFs",
            "dWUSDAoEcGF0aBgCIAEoCSJ1ChBBbmltYXRpb25DaGFubmVsEiwKB3NhbXBs",
            "ZXIYASABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRIzCgZ0YXJn",
            "ZXQYAiABKAsyIy5Wcm1Qcm90b2J1Zi5BbmltYXRpb25DaGFubmVsVGFyZ2V0",
            "IoIBChBBbmltYXRpb25TYW1wbGVyEioKBWlucHV0GAEgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDMyVmFsdWUSFQoNaW50ZXJwb2xhdGlvbhgCIAEoCRIr",
            "CgZvdXRwdXQYAyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZSJ7",
            "CglBbmltYXRpb24SLwoIY2hhbm5lbHMYASADKAsyHS5Wcm1Qcm90b2J1Zi5B",
            "bmltYXRpb25DaGFubmVsEi8KCHNhbXBsZXJzGAIgAygLMh0uVnJtUHJvdG9i",
            "dWYuQW5pbWF0aW9uU2FtcGxlchIMCgRuYW1lGAMgASgJIlIKBUFzc2V0EhEK",
            "CWNvcHlyaWdodBgBIAEoCRIRCglnZW5lcmF0b3IYAiABKAkSDwoHdmVyc2lv",
            "bhgDIAEoCRISCgptaW5WZXJzaW9uGAQgASgJIjcKBkJ1ZmZlchILCgN1cmkY",
            "ASABKAkSEgoKYnl0ZUxlbmd0aBgCIAEoBRIMCgRuYW1lGAMgASgJIs0BCgpC",
            "dWZmZXJWaWV3EisKBmJ1ZmZlchgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5J",
            "bnQzMlZhbHVlEi8KCmJ5dGVPZmZzZXQYAiABKAsyGy5nb29nbGUucHJvdG9i",
            "dWYuSW50MzJWYWx1ZRISCgpieXRlTGVuZ3RoGAMgASgFEi8KCmJ5dGVTdHJp",
            "ZGUYBCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRIMCgRuYW1l",
            "GAUgASgJEg4KBnRhcmdldBgGIAEoBSJlCgVJbWFnZRILCgN1cmkYASABKAkS",
            "EAoIbWltZVR5cGUYAiABKAkSLwoKYnVmZmVyVmlldxgDIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQzMlZhbHVlEgwKBG5hbWUYBCABKAkiwQIKGU1hdGVy",
            "aWFsTm9ybWFsVGV4dHVyZUluZm8SKgoFaW5kZXgYASABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50MzJWYWx1ZRItCgh0ZXhDb29yZBgCIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQzMlZhbHVlEioKBXNjYWxlGAMgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkZsb2F0VmFsdWUSRQoKZXh0ZW5zaW9ucxgEIAEoCzIxLlZy",
            "bVByb3RvYnVmLk1hdGVyaWFsTm9ybWFsVGV4dHVyZUluZm8uRXh0ZW5zaW9u",
            "cxpWCgpFeHRlbnNpb25zEkgKFUtIUl90ZXh0dXJlX3RyYW5zZm9ybRgBIAEo",
            "CzIpLlZybVByb3RvYnVmLktIUlRleHR1cmVUcmFuc2Zvcm1FeHRlbnNpb24i",
            "ygIKHE1hdGVyaWFsT2NjbHVzaW9uVGV4dHVyZUluZm8SKgoFaW5kZXgYASAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRItCgh0ZXhDb29yZBgC",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEi0KCHN0cmVuZ3Ro",
            "GAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUSSAoKZXh0ZW5z",
            "aW9ucxgEIAEoCzI0LlZybVByb3RvYnVmLk1hdGVyaWFsT2NjbHVzaW9uVGV4",
            "dHVyZUluZm8uRXh0ZW5zaW9ucxpWCgpFeHRlbnNpb25zEkgKFUtIUl90ZXh0",
            "dXJlX3RyYW5zZm9ybRgBIAEoCzIpLlZybVByb3RvYnVmLktIUlRleHR1cmVU",
            "cmFuc2Zvcm1FeHRlbnNpb24ikgIKHE1hdGVyaWFsUGJyTWV0YWxsaWNSb3Vn",
            "aG5lc3MSFwoPYmFzZUNvbG9yRmFjdG9yGAEgAygCEjIKEGJhc2VDb2xvclRl",
            "eHR1cmUYAiABKAsyGC5Wcm1Qcm90b2J1Zi5UZXh0dXJlSW5mbxIzCg5tZXRh",
            "bGxpY0ZhY3RvchgDIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVl",
            "EjQKD3JvdWdobmVzc0ZhY3RvchgEIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5G",
            "bG9hdFZhbHVlEjoKGG1ldGFsbGljUm91Z2huZXNzVGV4dHVyZRgFIAEoCzIY",
            "LlZybVByb3RvYnVmLlRleHR1cmVJbmZvIhUKE0tIUl9tYXRlcmlhbHNfdW5s",
            "aXQi0QUKCE1hdGVyaWFsEgwKBG5hbWUYASABKAkSRwoUcGJyTWV0YWxsaWNS",
            "b3VnaG5lc3MYAiABKAsyKS5Wcm1Qcm90b2J1Zi5NYXRlcmlhbFBick1ldGFs",
            "bGljUm91Z2huZXNzEj0KDW5vcm1hbFRleHR1cmUYAyABKAsyJi5Wcm1Qcm90",
            "b2J1Zi5NYXRlcmlhbE5vcm1hbFRleHR1cmVJbmZvEkMKEG9jY2x1c2lvblRl",
            "eHR1cmUYBCABKAsyKS5Wcm1Qcm90b2J1Zi5NYXRlcmlhbE9jY2x1c2lvblRl",
            "eHR1cmVJbmZvEjEKD2VtaXNzaXZlVGV4dHVyZRgFIAEoCzIYLlZybVByb3Rv",
            "YnVmLlRleHR1cmVJbmZvEhYKDmVtaXNzaXZlRmFjdG9yGAYgAygCEhEKCWFs",
            "cGhhTW9kZRgHIAEoCRIwCgthbHBoYUN1dG9mZhgIIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5GbG9hdFZhbHVlEi8KC2RvdWJsZVNpZGVkGAkgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLkJvb2xWYWx1ZRI0CgpleHRlbnNpb25zGAogASgLMiAu",
            "VnJtUHJvdG9idWYuTWF0ZXJpYWwuRXh0ZW5zaW9ucxryAQoKRXh0ZW5zaW9u",
            "cxI9ChNLSFJfbWF0ZXJpYWxzX3VubGl0GAEgASgLMiAuVnJtUHJvdG9idWYu",
            "S0hSX21hdGVyaWFsc191bmxpdBI/ChRWUk1DX21hdGVyaWFsc19tdG9vbhgC",
            "IAEoCzIhLlZybVByb3RvYnVmLlZSTUNfbWF0ZXJpYWxzX210b29uEmQKI0tI",
            "Ul9tYXRlcmlhbHNfcGJyU3BlY3VsYXJHbG9zc2luZXNzGAMgASgLMjcuVnJt",
            "UHJvdG9idWYuS0hSTWF0ZXJpYWxzUGJyU3BlY3VsYXJHbG9zc2luZXNzRXh0",
            "ZW5zaW9uIqUECg1NZXNoUHJpbWl0aXZlEj4KCmF0dHJpYnV0ZXMYASADKAsy",
            "Ki5Wcm1Qcm90b2J1Zi5NZXNoUHJpbWl0aXZlLkF0dHJpYnV0ZXNFbnRyeRIs",
            "CgdpbmRpY2VzGAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUS",
            "LQoIbWF0ZXJpYWwYAyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1",
            "ZRIpCgRtb2RlGAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUS",
            "MgoHdGFyZ2V0cxgFIAMoCzIhLlZybVByb3RvYnVmLk1lc2hQcmltaXRpdmUu",
            "VGFyZ2V0EjEKBmV4dHJhcxgGIAEoCzIhLlZybVByb3RvYnVmLk1lc2hQcmlt",
            "aXRpdmUuRXh0cmFzGjEKD0F0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASABKAkS",
            "DQoFdmFsdWUYAiABKAU6AjgBGpIBCgZUYXJnZXQSLQoIUE9TSVRJT04YASAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRIrCgZOT1JNQUwYAiAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRIsCgdUQU5HRU5UGAMg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUaHQoGRXh0cmFzEhMK",
            "C3RhcmdldE5hbWVzGAEgAygJIkQKBE1lc2gSLgoKcHJpbWl0aXZlcxgCIAMo",
            "CzIaLlZybVByb3RvYnVmLk1lc2hQcmltaXRpdmUSDAoEbmFtZRgBIAEoCSLC",
            "AQoETm9kZRIMCgRuYW1lGAEgASgJEhAKCGNoaWxkcmVuGAIgAygFEg4KBm1h",
            "dHJpeBgDIAMoAhIQCghyb3RhdGlvbhgEIAMoAhINCgVzY2FsZRgFIAMoAhIT",
            "Cgt0cmFuc2xhdGlvbhgGIAMoAhIpCgRtZXNoGAcgASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkludDMyVmFsdWUSKQoEc2tpbhgIIAEoCzIbLmdvb2dsZS5wcm90",
            "b2J1Zi5JbnQzMlZhbHVlIsEBCgdTYW1wbGVyEi4KCW1hZ0ZpbHRlchgBIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEi4KCW1pbkZpbHRlchgC",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEioKBXdyYXBTGAMg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSKgoFd3JhcFQYBCAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZSIkCgVTY2VuZRINCgVu",
            "b2RlcxgBIAMoBRIMCgRuYW1lGAIgASgJIo0BCgRTa2luEjgKE2ludmVyc2VC",
            "aW5kTWF0cmljZXMYASABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1",
            "ZRItCghza2VsZXRvbhgCIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZh",
            "bHVlEg4KBmpvaW50cxgDIAMoBRIMCgRuYW1lGAQgASgJInIKB1RleHR1cmUS",
            "LAoHc2FtcGxlchgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVl",
            "EisKBnNvdXJjZRgCIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVl",
            "EgwKBG5hbWUYAyABKAki+QEKC1RleHR1cmVJbmZvEioKBWluZGV4GAEgASgL",
            "MhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSLQoIdGV4Q29vcmQYAiAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRI3CgpleHRlbnNpb25z",
            "GAMgASgLMiMuVnJtUHJvdG9idWYuVGV4dHVyZUluZm8uRXh0ZW5zaW9ucxpW",
            "CgpFeHRlbnNpb25zEkgKFUtIUl90ZXh0dXJlX3RyYW5zZm9ybRgBIAEoCzIp",
            "LlZybVByb3RvYnVmLktIUlRleHR1cmVUcmFuc2Zvcm1FeHRlbnNpb24imwEK",
            "HEtIUlRleHR1cmVUcmFuc2Zvcm1FeHRlbnNpb24SDgoGb2Zmc2V0GAEgAygC",
            "Ei0KCHJvdGF0aW9uGAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFs",
            "dWUSDQoFc2NhbGUYAyADKAISLQoIdGV4Q29vcmQYBCABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50MzJWYWx1ZSKBAgoqS0hSTWF0ZXJpYWxzUGJyU3BlY3Vs",
            "YXJHbG9zc2luZXNzRXh0ZW5zaW9uEhUKDWRpZmZ1c2VGYWN0b3IYASADKAIS",
            "MAoOZGlmZnVzZVRleHR1cmUYAiABKAsyGC5Wcm1Qcm90b2J1Zi5UZXh0dXJl",
            "SW5mbxIWCg5zcGVjdWxhckZhY3RvchgDIAMoAhI1ChBnbG9zc2luZXNzRmFj",
            "dG9yGAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUSOwoZc3Bl",
            "Y3VsYXJHbG9zc2luZXNzVGV4dHVyZRgFIAEoCzIYLlZybVByb3RvYnVmLlRl",
            "eHR1cmVJbmZvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::VrmProtobuf.VRMCMaterialsMtoonReflection.Descriptor, global::VrmProtobuf.GlTFExtensionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.glTF), global::VrmProtobuf.glTF.Parser, new[]{ "ExtensionsUsed", "ExtensionsRequired", "Accessors", "Animations", "Asset", "Buffers", "BufferViews", "Images", "Materials", "Meshes", "Nodes", "Samplers", "Scene", "Scenes", "Skins", "Textures", "Extensions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Accessor), global::VrmProtobuf.Accessor.Parser, new[]{ "BufferView", "ByteOffset", "ComponentType", "Normalized", "Count", "Type", "Max", "Min", "Sparse", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.AccessorSparseIndices), global::VrmProtobuf.AccessorSparseIndices.Parser, new[]{ "BufferView", "ByteOffset", "ComponentType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.AccessorSparse), global::VrmProtobuf.AccessorSparse.Parser, new[]{ "Count", "Indices", "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.AccessorSparseValues), global::VrmProtobuf.AccessorSparseValues.Parser, new[]{ "BufferView", "ByteOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.AnimationChannelTarget), global::VrmProtobuf.AnimationChannelTarget.Parser, new[]{ "Node", "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.AnimationChannel), global::VrmProtobuf.AnimationChannel.Parser, new[]{ "Sampler", "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.AnimationSampler), global::VrmProtobuf.AnimationSampler.Parser, new[]{ "Input", "Interpolation", "Output" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Animation), global::VrmProtobuf.Animation.Parser, new[]{ "Channels", "Samplers", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Asset), global::VrmProtobuf.Asset.Parser, new[]{ "Copyright", "Generator", "Version", "MinVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Buffer), global::VrmProtobuf.Buffer.Parser, new[]{ "Uri", "ByteLength", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.BufferView), global::VrmProtobuf.BufferView.Parser, new[]{ "Buffer", "ByteOffset", "ByteLength", "ByteStride", "Name", "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Image), global::VrmProtobuf.Image.Parser, new[]{ "Uri", "MimeType", "BufferView", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.MaterialNormalTextureInfo), global::VrmProtobuf.MaterialNormalTextureInfo.Parser, new[]{ "Index", "TexCoord", "Scale", "Extensions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.MaterialNormalTextureInfo.Types.Extensions), global::VrmProtobuf.MaterialNormalTextureInfo.Types.Extensions.Parser, new[]{ "KHRTextureTransform" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.MaterialOcclusionTextureInfo), global::VrmProtobuf.MaterialOcclusionTextureInfo.Parser, new[]{ "Index", "TexCoord", "Strength", "Extensions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.MaterialOcclusionTextureInfo.Types.Extensions), global::VrmProtobuf.MaterialOcclusionTextureInfo.Types.Extensions.Parser, new[]{ "KHRTextureTransform" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.MaterialPbrMetallicRoughness), global::VrmProtobuf.MaterialPbrMetallicRoughness.Parser, new[]{ "BaseColorFactor", "BaseColorTexture", "MetallicFactor", "RoughnessFactor", "MetallicRoughnessTexture" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.KHR_materials_unlit), global::VrmProtobuf.KHR_materials_unlit.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Material), global::VrmProtobuf.Material.Parser, new[]{ "Name", "PbrMetallicRoughness", "NormalTexture", "OcclusionTexture", "EmissiveTexture", "EmissiveFactor", "AlphaMode", "AlphaCutoff", "DoubleSided", "Extensions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Material.Types.Extensions), global::VrmProtobuf.Material.Types.Extensions.Parser, new[]{ "KHRMaterialsUnlit", "VRMCMaterialsMtoon", "KHRMaterialsPbrSpecularGlossiness" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.MeshPrimitive), global::VrmProtobuf.MeshPrimitive.Parser, new[]{ "Attributes", "Indices", "Material", "Mode", "Targets", "Extras" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.MeshPrimitive.Types.Target), global::VrmProtobuf.MeshPrimitive.Types.Target.Parser, new[]{ "POSITION", "NORMAL", "TANGENT" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.MeshPrimitive.Types.Extras), global::VrmProtobuf.MeshPrimitive.Types.Extras.Parser, new[]{ "TargetNames" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Mesh), global::VrmProtobuf.Mesh.Parser, new[]{ "Primitives", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Node), global::VrmProtobuf.Node.Parser, new[]{ "Name", "Children", "Matrix", "Rotation", "Scale", "Translation", "Mesh", "Skin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Sampler), global::VrmProtobuf.Sampler.Parser, new[]{ "MagFilter", "MinFilter", "WrapS", "WrapT" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Scene), global::VrmProtobuf.Scene.Parser, new[]{ "Nodes", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Skin), global::VrmProtobuf.Skin.Parser, new[]{ "InverseBindMatrices", "Skeleton", "Joints", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.Texture), global::VrmProtobuf.Texture.Parser, new[]{ "Sampler", "Source", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.TextureInfo), global::VrmProtobuf.TextureInfo.Parser, new[]{ "Index", "TexCoord", "Extensions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.TextureInfo.Types.Extensions), global::VrmProtobuf.TextureInfo.Types.Extensions.Parser, new[]{ "KHRTextureTransform" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.KHRTextureTransformExtension), global::VrmProtobuf.KHRTextureTransformExtension.Parser, new[]{ "Offset", "Rotation", "Scale", "TexCoord" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.KHRMaterialsPbrSpecularGlossinessExtension), global::VrmProtobuf.KHRMaterialsPbrSpecularGlossinessExtension.Parser, new[]{ "DiffuseFactor", "DiffuseTexture", "SpecularFactor", "GlossinessFactor", "SpecularGlossinessTexture" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// [START GLTF]
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/glTF.schema.json
  /// </summary>
  public sealed partial class glTF : pb::IMessage<glTF> {
    private static readonly pb::MessageParser<glTF> _parser = new pb::MessageParser<glTF>(() => new glTF());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<glTF> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public glTF() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public glTF(glTF other) : this() {
      extensionsUsed_ = other.extensionsUsed_.Clone();
      extensionsRequired_ = other.extensionsRequired_.Clone();
      accessors_ = other.accessors_.Clone();
      animations_ = other.animations_.Clone();
      asset_ = other.asset_ != null ? other.asset_.Clone() : null;
      buffers_ = other.buffers_.Clone();
      bufferViews_ = other.bufferViews_.Clone();
      images_ = other.images_.Clone();
      materials_ = other.materials_.Clone();
      meshes_ = other.meshes_.Clone();
      nodes_ = other.nodes_.Clone();
      samplers_ = other.samplers_.Clone();
      Scene = other.Scene;
      scenes_ = other.scenes_.Clone();
      skins_ = other.skins_.Clone();
      textures_ = other.textures_.Clone();
      extensions_ = other.extensions_ != null ? other.extensions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public glTF Clone() {
      return new glTF(this);
    }

    /// <summary>Field number for the "extensionsUsed" field.</summary>
    public const int ExtensionsUsedFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_extensionsUsed_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> extensionsUsed_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExtensionsUsed {
      get { return extensionsUsed_; }
    }

    /// <summary>Field number for the "extensionsRequired" field.</summary>
    public const int ExtensionsRequiredFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_extensionsRequired_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> extensionsRequired_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExtensionsRequired {
      get { return extensionsRequired_; }
    }

    /// <summary>Field number for the "accessors" field.</summary>
    public const int AccessorsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::VrmProtobuf.Accessor> _repeated_accessors_codec
        = pb::FieldCodec.ForMessage(26, global::VrmProtobuf.Accessor.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.Accessor> accessors_ = new pbc::RepeatedField<global::VrmProtobuf.Accessor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.Accessor> Accessors {
      get { return accessors_; }
    }

    /// <summary>Field number for the "animations" field.</summary>
    public const int AnimationsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::VrmProtobuf.Animation> _repeated_animations_codec
        = pb::FieldCodec.ForMessage(34, global::VrmProtobuf.Animation.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.Animation> animations_ = new pbc::RepeatedField<global::VrmProtobuf.Animation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.Animation> Animations {
      get { return animations_; }
    }

    /// <summary>Field number for the "asset" field.</summary>
    public const int AssetFieldNumber = 5;
    private global::VrmProtobuf.Asset asset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.Asset Asset {
      get { return asset_; }
      set {
        asset_ = value;
      }
    }

    /// <summary>Field number for the "buffers" field.</summary>
    public const int BuffersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::VrmProtobuf.Buffer> _repeated_buffers_codec
        = pb::FieldCodec.ForMessage(50, global::VrmProtobuf.Buffer.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.Buffer> buffers_ = new pbc::RepeatedField<global::VrmProtobuf.Buffer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.Buffer> Buffers {
      get { return buffers_; }
    }

    /// <summary>Field number for the "bufferViews" field.</summary>
    public const int BufferViewsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::VrmProtobuf.BufferView> _repeated_bufferViews_codec
        = pb::FieldCodec.ForMessage(58, global::VrmProtobuf.BufferView.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.BufferView> bufferViews_ = new pbc::RepeatedField<global::VrmProtobuf.BufferView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.BufferView> BufferViews {
      get { return bufferViews_; }
    }

    /// <summary>Field number for the "images" field.</summary>
    public const int ImagesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::VrmProtobuf.Image> _repeated_images_codec
        = pb::FieldCodec.ForMessage(66, global::VrmProtobuf.Image.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.Image> images_ = new pbc::RepeatedField<global::VrmProtobuf.Image>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.Image> Images {
      get { return images_; }
    }

    /// <summary>Field number for the "materials" field.</summary>
    public const int MaterialsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::VrmProtobuf.Material> _repeated_materials_codec
        = pb::FieldCodec.ForMessage(74, global::VrmProtobuf.Material.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.Material> materials_ = new pbc::RepeatedField<global::VrmProtobuf.Material>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.Material> Materials {
      get { return materials_; }
    }

    /// <summary>Field number for the "meshes" field.</summary>
    public const int MeshesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::VrmProtobuf.Mesh> _repeated_meshes_codec
        = pb::FieldCodec.ForMessage(82, global::VrmProtobuf.Mesh.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.Mesh> meshes_ = new pbc::RepeatedField<global::VrmProtobuf.Mesh>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.Mesh> Meshes {
      get { return meshes_; }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::VrmProtobuf.Node> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(90, global::VrmProtobuf.Node.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.Node> nodes_ = new pbc::RepeatedField<global::VrmProtobuf.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.Node> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "samplers" field.</summary>
    public const int SamplersFieldNumber = 12;
    private static readonly pb::FieldCodec<global::VrmProtobuf.Sampler> _repeated_samplers_codec
        = pb::FieldCodec.ForMessage(98, global::VrmProtobuf.Sampler.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.Sampler> samplers_ = new pbc::RepeatedField<global::VrmProtobuf.Sampler>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.Sampler> Samplers {
      get { return samplers_; }
    }

    /// <summary>Field number for the "scene" field.</summary>
    public const int SceneFieldNumber = 13;
    private static readonly pb::FieldCodec<int?> _single_scene_codec = pb::FieldCodec.ForStructWrapper<int>(106);
    private int? scene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Scene {
      get { return scene_; }
      set {
        scene_ = value;
      }
    }


    /// <summary>Field number for the "scenes" field.</summary>
    public const int ScenesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::VrmProtobuf.Scene> _repeated_scenes_codec
        = pb::FieldCodec.ForMessage(114, global::VrmProtobuf.Scene.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.Scene> scenes_ = new pbc::RepeatedField<global::VrmProtobuf.Scene>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.Scene> Scenes {
      get { return scenes_; }
    }

    /// <summary>Field number for the "skins" field.</summary>
    public const int SkinsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::VrmProtobuf.Skin> _repeated_skins_codec
        = pb::FieldCodec.ForMessage(122, global::VrmProtobuf.Skin.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.Skin> skins_ = new pbc::RepeatedField<global::VrmProtobuf.Skin>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.Skin> Skins {
      get { return skins_; }
    }

    /// <summary>Field number for the "textures" field.</summary>
    public const int TexturesFieldNumber = 16;
    private static readonly pb::FieldCodec<global::VrmProtobuf.Texture> _repeated_textures_codec
        = pb::FieldCodec.ForMessage(130, global::VrmProtobuf.Texture.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.Texture> textures_ = new pbc::RepeatedField<global::VrmProtobuf.Texture>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.Texture> Textures {
      get { return textures_; }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 17;
    private global::VrmProtobuf.Extensions extensions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.Extensions Extensions {
      get { return extensions_; }
      set {
        extensions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as glTF);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(glTF other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!extensionsUsed_.Equals(other.extensionsUsed_)) return false;
      if(!extensionsRequired_.Equals(other.extensionsRequired_)) return false;
      if(!accessors_.Equals(other.accessors_)) return false;
      if(!animations_.Equals(other.animations_)) return false;
      if (!object.Equals(Asset, other.Asset)) return false;
      if(!buffers_.Equals(other.buffers_)) return false;
      if(!bufferViews_.Equals(other.bufferViews_)) return false;
      if(!images_.Equals(other.images_)) return false;
      if(!materials_.Equals(other.materials_)) return false;
      if(!meshes_.Equals(other.meshes_)) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      if(!samplers_.Equals(other.samplers_)) return false;
      if (Scene != other.Scene) return false;
      if(!scenes_.Equals(other.scenes_)) return false;
      if(!skins_.Equals(other.skins_)) return false;
      if(!textures_.Equals(other.textures_)) return false;
      if (!object.Equals(Extensions, other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= extensionsUsed_.GetHashCode();
      hash ^= extensionsRequired_.GetHashCode();
      hash ^= accessors_.GetHashCode();
      hash ^= animations_.GetHashCode();
      if (asset_ != null) hash ^= Asset.GetHashCode();
      hash ^= buffers_.GetHashCode();
      hash ^= bufferViews_.GetHashCode();
      hash ^= images_.GetHashCode();
      hash ^= materials_.GetHashCode();
      hash ^= meshes_.GetHashCode();
      hash ^= nodes_.GetHashCode();
      hash ^= samplers_.GetHashCode();
      if (scene_ != null) hash ^= Scene.GetHashCode();
      hash ^= scenes_.GetHashCode();
      hash ^= skins_.GetHashCode();
      hash ^= textures_.GetHashCode();
      if (extensions_ != null) hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      extensionsUsed_.WriteTo(output, _repeated_extensionsUsed_codec);
      extensionsRequired_.WriteTo(output, _repeated_extensionsRequired_codec);
      accessors_.WriteTo(output, _repeated_accessors_codec);
      animations_.WriteTo(output, _repeated_animations_codec);
      if (asset_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Asset);
      }
      buffers_.WriteTo(output, _repeated_buffers_codec);
      bufferViews_.WriteTo(output, _repeated_bufferViews_codec);
      images_.WriteTo(output, _repeated_images_codec);
      materials_.WriteTo(output, _repeated_materials_codec);
      meshes_.WriteTo(output, _repeated_meshes_codec);
      nodes_.WriteTo(output, _repeated_nodes_codec);
      samplers_.WriteTo(output, _repeated_samplers_codec);
      if (scene_ != null) {
        _single_scene_codec.WriteTagAndValue(output, Scene);
      }
      scenes_.WriteTo(output, _repeated_scenes_codec);
      skins_.WriteTo(output, _repeated_skins_codec);
      textures_.WriteTo(output, _repeated_textures_codec);
      if (extensions_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Extensions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += extensionsUsed_.CalculateSize(_repeated_extensionsUsed_codec);
      size += extensionsRequired_.CalculateSize(_repeated_extensionsRequired_codec);
      size += accessors_.CalculateSize(_repeated_accessors_codec);
      size += animations_.CalculateSize(_repeated_animations_codec);
      if (asset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Asset);
      }
      size += buffers_.CalculateSize(_repeated_buffers_codec);
      size += bufferViews_.CalculateSize(_repeated_bufferViews_codec);
      size += images_.CalculateSize(_repeated_images_codec);
      size += materials_.CalculateSize(_repeated_materials_codec);
      size += meshes_.CalculateSize(_repeated_meshes_codec);
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      size += samplers_.CalculateSize(_repeated_samplers_codec);
      if (scene_ != null) {
        size += _single_scene_codec.CalculateSizeWithTag(Scene);
      }
      size += scenes_.CalculateSize(_repeated_scenes_codec);
      size += skins_.CalculateSize(_repeated_skins_codec);
      size += textures_.CalculateSize(_repeated_textures_codec);
      if (extensions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Extensions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(glTF other) {
      if (other == null) {
        return;
      }
      extensionsUsed_.Add(other.extensionsUsed_);
      extensionsRequired_.Add(other.extensionsRequired_);
      accessors_.Add(other.accessors_);
      animations_.Add(other.animations_);
      if (other.asset_ != null) {
        if (asset_ == null) {
          Asset = new global::VrmProtobuf.Asset();
        }
        Asset.MergeFrom(other.Asset);
      }
      buffers_.Add(other.buffers_);
      bufferViews_.Add(other.bufferViews_);
      images_.Add(other.images_);
      materials_.Add(other.materials_);
      meshes_.Add(other.meshes_);
      nodes_.Add(other.nodes_);
      samplers_.Add(other.samplers_);
      if (other.scene_ != null) {
        if (scene_ == null || other.Scene != 0) {
          Scene = other.Scene;
        }
      }
      scenes_.Add(other.scenes_);
      skins_.Add(other.skins_);
      textures_.Add(other.textures_);
      if (other.extensions_ != null) {
        if (extensions_ == null) {
          Extensions = new global::VrmProtobuf.Extensions();
        }
        Extensions.MergeFrom(other.Extensions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            extensionsUsed_.AddEntriesFrom(input, _repeated_extensionsUsed_codec);
            break;
          }
          case 18: {
            extensionsRequired_.AddEntriesFrom(input, _repeated_extensionsRequired_codec);
            break;
          }
          case 26: {
            accessors_.AddEntriesFrom(input, _repeated_accessors_codec);
            break;
          }
          case 34: {
            animations_.AddEntriesFrom(input, _repeated_animations_codec);
            break;
          }
          case 42: {
            if (asset_ == null) {
              Asset = new global::VrmProtobuf.Asset();
            }
            input.ReadMessage(Asset);
            break;
          }
          case 50: {
            buffers_.AddEntriesFrom(input, _repeated_buffers_codec);
            break;
          }
          case 58: {
            bufferViews_.AddEntriesFrom(input, _repeated_bufferViews_codec);
            break;
          }
          case 66: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
          case 74: {
            materials_.AddEntriesFrom(input, _repeated_materials_codec);
            break;
          }
          case 82: {
            meshes_.AddEntriesFrom(input, _repeated_meshes_codec);
            break;
          }
          case 90: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 98: {
            samplers_.AddEntriesFrom(input, _repeated_samplers_codec);
            break;
          }
          case 106: {
            int? value = _single_scene_codec.Read(input);
            if (scene_ == null || value != 0) {
              Scene = value;
            }
            break;
          }
          case 114: {
            scenes_.AddEntriesFrom(input, _repeated_scenes_codec);
            break;
          }
          case 122: {
            skins_.AddEntriesFrom(input, _repeated_skins_codec);
            break;
          }
          case 130: {
            textures_.AddEntriesFrom(input, _repeated_textures_codec);
            break;
          }
          case 138: {
            if (extensions_ == null) {
              Extensions = new global::VrmProtobuf.Extensions();
            }
            input.ReadMessage(Extensions);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.schema.json
  /// "required": [ "componentType", "count", "type" ]
  /// </summary>
  public sealed partial class Accessor : pb::IMessage<Accessor> {
    private static readonly pb::MessageParser<Accessor> _parser = new pb::MessageParser<Accessor>(() => new Accessor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Accessor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accessor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accessor(Accessor other) : this() {
      BufferView = other.BufferView;
      ByteOffset = other.ByteOffset;
      componentType_ = other.componentType_;
      Normalized = other.Normalized;
      count_ = other.count_;
      type_ = other.type_;
      max_ = other.max_.Clone();
      min_ = other.min_.Clone();
      sparse_ = other.sparse_ != null ? other.sparse_.Clone() : null;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accessor Clone() {
      return new Accessor(this);
    }

    /// <summary>Field number for the "bufferView" field.</summary>
    public const int BufferViewFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_bufferView_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? bufferView_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? BufferView {
      get { return bufferView_; }
      set {
        bufferView_ = value;
      }
    }


    /// <summary>Field number for the "byteOffset" field.</summary>
    public const int ByteOffsetFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_byteOffset_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? byteOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? ByteOffset {
      get { return byteOffset_; }
      set {
        byteOffset_ = value;
      }
    }


    /// <summary>Field number for the "componentType" field.</summary>
    public const int ComponentTypeFieldNumber = 3;
    private int componentType_;
    /// <summary>
    /// enum ComponentType {
    ///   COMPONENTTYPE_UNKNOWN = 0;
    ///   BYTE = 5120;
    ///   UNSIGNED_BYTE = 5121;
    ///   SHORT = 5122;
    ///   UNSIGNED_SHORT = 5123;
    ///   UNSIGNED_INT = 5125;
    ///   FLOAT = 5126;
    /// }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComponentType {
      get { return componentType_; }
      set {
        componentType_ = value;
      }
    }

    /// <summary>Field number for the "normalized" field.</summary>
    public const int NormalizedFieldNumber = 4;
    private static readonly pb::FieldCodec<bool?> _single_normalized_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
    private bool? normalized_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Normalized {
      get { return normalized_; }
      set {
        normalized_ = value;
      }
    }


    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private string type_ = "";
    /// <summary>
    ///  "SCALAR", "VEC2", "VEC3", "VEC4", "MAT2", "MAT3", "MAT4"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_max_codec
        = pb::FieldCodec.ForFloat(58);
    private readonly pbc::RepeatedField<float> max_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Max {
      get { return max_; }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_min_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> min_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Min {
      get { return min_; }
    }

    /// <summary>Field number for the "sparse" field.</summary>
    public const int SparseFieldNumber = 9;
    private global::VrmProtobuf.AccessorSparse sparse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.AccessorSparse Sparse {
      get { return sparse_; }
      set {
        sparse_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 10;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Accessor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Accessor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BufferView != other.BufferView) return false;
      if (ByteOffset != other.ByteOffset) return false;
      if (ComponentType != other.ComponentType) return false;
      if (Normalized != other.Normalized) return false;
      if (Count != other.Count) return false;
      if (Type != other.Type) return false;
      if(!max_.Equals(other.max_)) return false;
      if(!min_.Equals(other.min_)) return false;
      if (!object.Equals(Sparse, other.Sparse)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bufferView_ != null) hash ^= BufferView.GetHashCode();
      if (byteOffset_ != null) hash ^= ByteOffset.GetHashCode();
      if (ComponentType != 0) hash ^= ComponentType.GetHashCode();
      if (normalized_ != null) hash ^= Normalized.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= max_.GetHashCode();
      hash ^= min_.GetHashCode();
      if (sparse_ != null) hash ^= Sparse.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bufferView_ != null) {
        _single_bufferView_codec.WriteTagAndValue(output, BufferView);
      }
      if (byteOffset_ != null) {
        _single_byteOffset_codec.WriteTagAndValue(output, ByteOffset);
      }
      if (ComponentType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ComponentType);
      }
      if (normalized_ != null) {
        _single_normalized_codec.WriteTagAndValue(output, Normalized);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Count);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Type);
      }
      max_.WriteTo(output, _repeated_max_codec);
      min_.WriteTo(output, _repeated_min_codec);
      if (sparse_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Sparse);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bufferView_ != null) {
        size += _single_bufferView_codec.CalculateSizeWithTag(BufferView);
      }
      if (byteOffset_ != null) {
        size += _single_byteOffset_codec.CalculateSizeWithTag(ByteOffset);
      }
      if (ComponentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComponentType);
      }
      if (normalized_ != null) {
        size += _single_normalized_codec.CalculateSizeWithTag(Normalized);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += max_.CalculateSize(_repeated_max_codec);
      size += min_.CalculateSize(_repeated_min_codec);
      if (sparse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sparse);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Accessor other) {
      if (other == null) {
        return;
      }
      if (other.bufferView_ != null) {
        if (bufferView_ == null || other.BufferView != 0) {
          BufferView = other.BufferView;
        }
      }
      if (other.byteOffset_ != null) {
        if (byteOffset_ == null || other.ByteOffset != 0) {
          ByteOffset = other.ByteOffset;
        }
      }
      if (other.ComponentType != 0) {
        ComponentType = other.ComponentType;
      }
      if (other.normalized_ != null) {
        if (normalized_ == null || other.Normalized != false) {
          Normalized = other.Normalized;
        }
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      max_.Add(other.max_);
      min_.Add(other.min_);
      if (other.sparse_ != null) {
        if (sparse_ == null) {
          Sparse = new global::VrmProtobuf.AccessorSparse();
        }
        Sparse.MergeFrom(other.Sparse);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_bufferView_codec.Read(input);
            if (bufferView_ == null || value != 0) {
              BufferView = value;
            }
            break;
          }
          case 18: {
            int? value = _single_byteOffset_codec.Read(input);
            if (byteOffset_ == null || value != 0) {
              ByteOffset = value;
            }
            break;
          }
          case 24: {
            ComponentType = input.ReadInt32();
            break;
          }
          case 34: {
            bool? value = _single_normalized_codec.Read(input);
            if (normalized_ == null || value != false) {
              Normalized = value;
            }
            break;
          }
          case 40: {
            Count = input.ReadInt32();
            break;
          }
          case 50: {
            Type = input.ReadString();
            break;
          }
          case 58:
          case 61: {
            max_.AddEntriesFrom(input, _repeated_max_codec);
            break;
          }
          case 66:
          case 69: {
            min_.AddEntriesFrom(input, _repeated_min_codec);
            break;
          }
          case 74: {
            if (sparse_ == null) {
              Sparse = new global::VrmProtobuf.AccessorSparse();
            }
            input.ReadMessage(Sparse);
            break;
          }
          case 82: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.sparse.indices.schema.json
  /// "required": [ "bufferView", "componentType" ]
  /// </summary>
  public sealed partial class AccessorSparseIndices : pb::IMessage<AccessorSparseIndices> {
    private static readonly pb::MessageParser<AccessorSparseIndices> _parser = new pb::MessageParser<AccessorSparseIndices>(() => new AccessorSparseIndices());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessorSparseIndices> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessorSparseIndices() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessorSparseIndices(AccessorSparseIndices other) : this() {
      BufferView = other.BufferView;
      ByteOffset = other.ByteOffset;
      componentType_ = other.componentType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessorSparseIndices Clone() {
      return new AccessorSparseIndices(this);
    }

    /// <summary>Field number for the "bufferView" field.</summary>
    public const int BufferViewFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_bufferView_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? bufferView_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? BufferView {
      get { return bufferView_; }
      set {
        bufferView_ = value;
      }
    }


    /// <summary>Field number for the "byteOffset" field.</summary>
    public const int ByteOffsetFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_byteOffset_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? byteOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? ByteOffset {
      get { return byteOffset_; }
      set {
        byteOffset_ = value;
      }
    }


    /// <summary>Field number for the "componentType" field.</summary>
    public const int ComponentTypeFieldNumber = 3;
    private int componentType_;
    /// <summary>
    /// enum ComponentType {
    ///   UNKNOWN = 0;
    ///   UNSIGNED_BYTE = 5121;
    ///   UNSIGNED_SHORT = 5123;
    ///   UNSIGNED_INT = 5125;
    /// }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComponentType {
      get { return componentType_; }
      set {
        componentType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessorSparseIndices);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessorSparseIndices other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BufferView != other.BufferView) return false;
      if (ByteOffset != other.ByteOffset) return false;
      if (ComponentType != other.ComponentType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bufferView_ != null) hash ^= BufferView.GetHashCode();
      if (byteOffset_ != null) hash ^= ByteOffset.GetHashCode();
      if (ComponentType != 0) hash ^= ComponentType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bufferView_ != null) {
        _single_bufferView_codec.WriteTagAndValue(output, BufferView);
      }
      if (byteOffset_ != null) {
        _single_byteOffset_codec.WriteTagAndValue(output, ByteOffset);
      }
      if (ComponentType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ComponentType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bufferView_ != null) {
        size += _single_bufferView_codec.CalculateSizeWithTag(BufferView);
      }
      if (byteOffset_ != null) {
        size += _single_byteOffset_codec.CalculateSizeWithTag(ByteOffset);
      }
      if (ComponentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComponentType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessorSparseIndices other) {
      if (other == null) {
        return;
      }
      if (other.bufferView_ != null) {
        if (bufferView_ == null || other.BufferView != 0) {
          BufferView = other.BufferView;
        }
      }
      if (other.byteOffset_ != null) {
        if (byteOffset_ == null || other.ByteOffset != 0) {
          ByteOffset = other.ByteOffset;
        }
      }
      if (other.ComponentType != 0) {
        ComponentType = other.ComponentType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_bufferView_codec.Read(input);
            if (bufferView_ == null || value != 0) {
              BufferView = value;
            }
            break;
          }
          case 18: {
            int? value = _single_byteOffset_codec.Read(input);
            if (byteOffset_ == null || value != 0) {
              ByteOffset = value;
            }
            break;
          }
          case 24: {
            ComponentType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.sparse.schema.json
  /// "required": [ "count", "indices", "values" ]
  /// </summary>
  public sealed partial class AccessorSparse : pb::IMessage<AccessorSparse> {
    private static readonly pb::MessageParser<AccessorSparse> _parser = new pb::MessageParser<AccessorSparse>(() => new AccessorSparse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessorSparse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessorSparse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessorSparse(AccessorSparse other) : this() {
      count_ = other.count_;
      indices_ = other.indices_ != null ? other.indices_.Clone() : null;
      values_ = other.values_ != null ? other.values_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessorSparse Clone() {
      return new AccessorSparse(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "indices" field.</summary>
    public const int IndicesFieldNumber = 2;
    private global::VrmProtobuf.AccessorSparseIndices indices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.AccessorSparseIndices Indices {
      get { return indices_; }
      set {
        indices_ = value;
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 3;
    private global::VrmProtobuf.AccessorSparseValues values_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.AccessorSparseValues Values {
      get { return values_; }
      set {
        values_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessorSparse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessorSparse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (!object.Equals(Indices, other.Indices)) return false;
      if (!object.Equals(Values, other.Values)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (indices_ != null) hash ^= Indices.GetHashCode();
      if (values_ != null) hash ^= Values.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (indices_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Indices);
      }
      if (values_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Values);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (indices_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Indices);
      }
      if (values_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Values);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessorSparse other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.indices_ != null) {
        if (indices_ == null) {
          Indices = new global::VrmProtobuf.AccessorSparseIndices();
        }
        Indices.MergeFrom(other.Indices);
      }
      if (other.values_ != null) {
        if (values_ == null) {
          Values = new global::VrmProtobuf.AccessorSparseValues();
        }
        Values.MergeFrom(other.Values);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 18: {
            if (indices_ == null) {
              Indices = new global::VrmProtobuf.AccessorSparseIndices();
            }
            input.ReadMessage(Indices);
            break;
          }
          case 26: {
            if (values_ == null) {
              Values = new global::VrmProtobuf.AccessorSparseValues();
            }
            input.ReadMessage(Values);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.sparse.values.schema.json
  /// "required": [ "bufferView" ]
  /// </summary>
  public sealed partial class AccessorSparseValues : pb::IMessage<AccessorSparseValues> {
    private static readonly pb::MessageParser<AccessorSparseValues> _parser = new pb::MessageParser<AccessorSparseValues>(() => new AccessorSparseValues());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessorSparseValues> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessorSparseValues() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessorSparseValues(AccessorSparseValues other) : this() {
      BufferView = other.BufferView;
      ByteOffset = other.ByteOffset;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessorSparseValues Clone() {
      return new AccessorSparseValues(this);
    }

    /// <summary>Field number for the "bufferView" field.</summary>
    public const int BufferViewFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_bufferView_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? bufferView_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? BufferView {
      get { return bufferView_; }
      set {
        bufferView_ = value;
      }
    }


    /// <summary>Field number for the "byteOffset" field.</summary>
    public const int ByteOffsetFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_byteOffset_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? byteOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? ByteOffset {
      get { return byteOffset_; }
      set {
        byteOffset_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessorSparseValues);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessorSparseValues other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BufferView != other.BufferView) return false;
      if (ByteOffset != other.ByteOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bufferView_ != null) hash ^= BufferView.GetHashCode();
      if (byteOffset_ != null) hash ^= ByteOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bufferView_ != null) {
        _single_bufferView_codec.WriteTagAndValue(output, BufferView);
      }
      if (byteOffset_ != null) {
        _single_byteOffset_codec.WriteTagAndValue(output, ByteOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bufferView_ != null) {
        size += _single_bufferView_codec.CalculateSizeWithTag(BufferView);
      }
      if (byteOffset_ != null) {
        size += _single_byteOffset_codec.CalculateSizeWithTag(ByteOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessorSparseValues other) {
      if (other == null) {
        return;
      }
      if (other.bufferView_ != null) {
        if (bufferView_ == null || other.BufferView != 0) {
          BufferView = other.BufferView;
        }
      }
      if (other.byteOffset_ != null) {
        if (byteOffset_ == null || other.ByteOffset != 0) {
          ByteOffset = other.ByteOffset;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_bufferView_codec.Read(input);
            if (bufferView_ == null || value != 0) {
              BufferView = value;
            }
            break;
          }
          case 18: {
            int? value = _single_byteOffset_codec.Read(input);
            if (byteOffset_ == null || value != 0) {
              ByteOffset = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.channel.target.schema.json
  /// "required": [ "path" ]
  /// </summary>
  public sealed partial class AnimationChannelTarget : pb::IMessage<AnimationChannelTarget> {
    private static readonly pb::MessageParser<AnimationChannelTarget> _parser = new pb::MessageParser<AnimationChannelTarget>(() => new AnimationChannelTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationChannelTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationChannelTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationChannelTarget(AnimationChannelTarget other) : this() {
      Node = other.Node;
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationChannelTarget Clone() {
      return new AnimationChannelTarget(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_node_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? node_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }


    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationChannelTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationChannelTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Node != other.Node) return false;
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (node_ != null) {
        _single_node_codec.WriteTagAndValue(output, Node);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += _single_node_codec.CalculateSizeWithTag(Node);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationChannelTarget other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null || other.Node != 0) {
          Node = other.Node;
        }
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_node_codec.Read(input);
            if (node_ == null || value != 0) {
              Node = value;
            }
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.channel.schema.json
  /// "required": [ "sampler", "target" ]
  /// </summary>
  public sealed partial class AnimationChannel : pb::IMessage<AnimationChannel> {
    private static readonly pb::MessageParser<AnimationChannel> _parser = new pb::MessageParser<AnimationChannel>(() => new AnimationChannel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationChannel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationChannel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationChannel(AnimationChannel other) : this() {
      Sampler = other.Sampler;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationChannel Clone() {
      return new AnimationChannel(this);
    }

    /// <summary>Field number for the "sampler" field.</summary>
    public const int SamplerFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_sampler_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? sampler_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Sampler {
      get { return sampler_; }
      set {
        sampler_ = value;
      }
    }


    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private global::VrmProtobuf.AnimationChannelTarget target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.AnimationChannelTarget Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationChannel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationChannel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sampler != other.Sampler) return false;
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sampler_ != null) hash ^= Sampler.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sampler_ != null) {
        _single_sampler_codec.WriteTagAndValue(output, Sampler);
      }
      if (target_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sampler_ != null) {
        size += _single_sampler_codec.CalculateSizeWithTag(Sampler);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationChannel other) {
      if (other == null) {
        return;
      }
      if (other.sampler_ != null) {
        if (sampler_ == null || other.Sampler != 0) {
          Sampler = other.Sampler;
        }
      }
      if (other.target_ != null) {
        if (target_ == null) {
          Target = new global::VrmProtobuf.AnimationChannelTarget();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_sampler_codec.Read(input);
            if (sampler_ == null || value != 0) {
              Sampler = value;
            }
            break;
          }
          case 18: {
            if (target_ == null) {
              Target = new global::VrmProtobuf.AnimationChannelTarget();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.sampler.schema.json
  /// "required": [ "input", "output" ]
  /// </summary>
  public sealed partial class AnimationSampler : pb::IMessage<AnimationSampler> {
    private static readonly pb::MessageParser<AnimationSampler> _parser = new pb::MessageParser<AnimationSampler>(() => new AnimationSampler());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationSampler> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationSampler() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationSampler(AnimationSampler other) : this() {
      Input = other.Input;
      interpolation_ = other.interpolation_;
      Output = other.Output;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationSampler Clone() {
      return new AnimationSampler(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_input_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? input_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }


    /// <summary>Field number for the "interpolation" field.</summary>
    public const int InterpolationFieldNumber = 2;
    private string interpolation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Interpolation {
      get { return interpolation_; }
      set {
        interpolation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_output_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? output_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Output {
      get { return output_; }
      set {
        output_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationSampler);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationSampler other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Input != other.Input) return false;
      if (Interpolation != other.Interpolation) return false;
      if (Output != other.Output) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (Interpolation.Length != 0) hash ^= Interpolation.GetHashCode();
      if (output_ != null) hash ^= Output.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (input_ != null) {
        _single_input_codec.WriteTagAndValue(output, Input);
      }
      if (Interpolation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Interpolation);
      }
      if (output_ != null) {
        _single_output_codec.WriteTagAndValue(output, Output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += _single_input_codec.CalculateSizeWithTag(Input);
      }
      if (Interpolation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Interpolation);
      }
      if (output_ != null) {
        size += _single_output_codec.CalculateSizeWithTag(Output);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationSampler other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null || other.Input != 0) {
          Input = other.Input;
        }
      }
      if (other.Interpolation.Length != 0) {
        Interpolation = other.Interpolation;
      }
      if (other.output_ != null) {
        if (output_ == null || other.Output != 0) {
          Output = other.Output;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_input_codec.Read(input);
            if (input_ == null || value != 0) {
              Input = value;
            }
            break;
          }
          case 18: {
            Interpolation = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_output_codec.Read(input);
            if (output_ == null || value != 0) {
              Output = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.schema.json
  /// "required": [ "channels", "samplers" ]
  /// </summary>
  public sealed partial class Animation : pb::IMessage<Animation> {
    private static readonly pb::MessageParser<Animation> _parser = new pb::MessageParser<Animation>(() => new Animation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Animation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation(Animation other) : this() {
      channels_ = other.channels_.Clone();
      samplers_ = other.samplers_.Clone();
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation Clone() {
      return new Animation(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::VrmProtobuf.AnimationChannel> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(10, global::VrmProtobuf.AnimationChannel.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.AnimationChannel> channels_ = new pbc::RepeatedField<global::VrmProtobuf.AnimationChannel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.AnimationChannel> Channels {
      get { return channels_; }
    }

    /// <summary>Field number for the "samplers" field.</summary>
    public const int SamplersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VrmProtobuf.AnimationSampler> _repeated_samplers_codec
        = pb::FieldCodec.ForMessage(18, global::VrmProtobuf.AnimationSampler.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.AnimationSampler> samplers_ = new pbc::RepeatedField<global::VrmProtobuf.AnimationSampler>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.AnimationSampler> Samplers {
      get { return samplers_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Animation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Animation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channels_.Equals(other.channels_)) return false;
      if(!samplers_.Equals(other.samplers_)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channels_.GetHashCode();
      hash ^= samplers_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channels_.WriteTo(output, _repeated_channels_codec);
      samplers_.WriteTo(output, _repeated_samplers_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channels_.CalculateSize(_repeated_channels_codec);
      size += samplers_.CalculateSize(_repeated_samplers_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Animation other) {
      if (other == null) {
        return;
      }
      channels_.Add(other.channels_);
      samplers_.Add(other.samplers_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
          case 18: {
            samplers_.AddEntriesFrom(input, _repeated_samplers_codec);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/asset.schema.json
  /// "required": [ "version" ]
  /// </summary>
  public sealed partial class Asset : pb::IMessage<Asset> {
    private static readonly pb::MessageParser<Asset> _parser = new pb::MessageParser<Asset>(() => new Asset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Asset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset(Asset other) : this() {
      copyright_ = other.copyright_;
      generator_ = other.generator_;
      version_ = other.version_;
      minVersion_ = other.minVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset Clone() {
      return new Asset(this);
    }

    /// <summary>Field number for the "copyright" field.</summary>
    public const int CopyrightFieldNumber = 1;
    private string copyright_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Copyright {
      get { return copyright_; }
      set {
        copyright_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "generator" field.</summary>
    public const int GeneratorFieldNumber = 2;
    private string generator_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Generator {
      get { return generator_; }
      set {
        generator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minVersion" field.</summary>
    public const int MinVersionFieldNumber = 4;
    private string minVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinVersion {
      get { return minVersion_; }
      set {
        minVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Asset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Asset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Copyright != other.Copyright) return false;
      if (Generator != other.Generator) return false;
      if (Version != other.Version) return false;
      if (MinVersion != other.MinVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Copyright.Length != 0) hash ^= Copyright.GetHashCode();
      if (Generator.Length != 0) hash ^= Generator.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (MinVersion.Length != 0) hash ^= MinVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Copyright.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Copyright);
      }
      if (Generator.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Generator);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (MinVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MinVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Copyright.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Copyright);
      }
      if (Generator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Generator);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (MinVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MinVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Asset other) {
      if (other == null) {
        return;
      }
      if (other.Copyright.Length != 0) {
        Copyright = other.Copyright;
      }
      if (other.Generator.Length != 0) {
        Generator = other.Generator;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.MinVersion.Length != 0) {
        MinVersion = other.MinVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Copyright = input.ReadString();
            break;
          }
          case 18: {
            Generator = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            MinVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/buffer.schema.json
  /// "required": [ "byteLength" ]
  /// </summary>
  public sealed partial class Buffer : pb::IMessage<Buffer> {
    private static readonly pb::MessageParser<Buffer> _parser = new pb::MessageParser<Buffer>(() => new Buffer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Buffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buffer(Buffer other) : this() {
      uri_ = other.uri_;
      byteLength_ = other.byteLength_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buffer Clone() {
      return new Buffer(this);
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 1;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "byteLength" field.</summary>
    public const int ByteLengthFieldNumber = 2;
    private int byteLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ByteLength {
      get { return byteLength_; }
      set {
        byteLength_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Buffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Buffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uri != other.Uri) return false;
      if (ByteLength != other.ByteLength) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (ByteLength != 0) hash ^= ByteLength.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uri);
      }
      if (ByteLength != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ByteLength);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (ByteLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ByteLength);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Buffer other) {
      if (other == null) {
        return;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.ByteLength != 0) {
        ByteLength = other.ByteLength;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uri = input.ReadString();
            break;
          }
          case 16: {
            ByteLength = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/bufferView.schema.json
  /// "required": [ "buffer", "byteLength" ]
  /// </summary>
  public sealed partial class BufferView : pb::IMessage<BufferView> {
    private static readonly pb::MessageParser<BufferView> _parser = new pb::MessageParser<BufferView>(() => new BufferView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferView(BufferView other) : this() {
      Buffer = other.Buffer;
      ByteOffset = other.ByteOffset;
      byteLength_ = other.byteLength_;
      ByteStride = other.ByteStride;
      name_ = other.name_;
      target_ = other.target_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferView Clone() {
      return new BufferView(this);
    }

    /// <summary>Field number for the "buffer" field.</summary>
    public const int BufferFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_buffer_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? buffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Buffer {
      get { return buffer_; }
      set {
        buffer_ = value;
      }
    }


    /// <summary>Field number for the "byteOffset" field.</summary>
    public const int ByteOffsetFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_byteOffset_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? byteOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? ByteOffset {
      get { return byteOffset_; }
      set {
        byteOffset_ = value;
      }
    }


    /// <summary>Field number for the "byteLength" field.</summary>
    public const int ByteLengthFieldNumber = 3;
    private int byteLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ByteLength {
      get { return byteLength_; }
      set {
        byteLength_ = value;
      }
    }

    /// <summary>Field number for the "byteStride" field.</summary>
    public const int ByteStrideFieldNumber = 4;
    private static readonly pb::FieldCodec<int?> _single_byteStride_codec = pb::FieldCodec.ForStructWrapper<int>(34);
    private int? byteStride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? ByteStride {
      get { return byteStride_; }
      set {
        byteStride_ = value;
      }
    }


    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 6;
    private int target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Buffer != other.Buffer) return false;
      if (ByteOffset != other.ByteOffset) return false;
      if (ByteLength != other.ByteLength) return false;
      if (ByteStride != other.ByteStride) return false;
      if (Name != other.Name) return false;
      if (Target != other.Target) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (buffer_ != null) hash ^= Buffer.GetHashCode();
      if (byteOffset_ != null) hash ^= ByteOffset.GetHashCode();
      if (ByteLength != 0) hash ^= ByteLength.GetHashCode();
      if (byteStride_ != null) hash ^= ByteStride.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (buffer_ != null) {
        _single_buffer_codec.WriteTagAndValue(output, Buffer);
      }
      if (byteOffset_ != null) {
        _single_byteOffset_codec.WriteTagAndValue(output, ByteOffset);
      }
      if (ByteLength != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ByteLength);
      }
      if (byteStride_ != null) {
        _single_byteStride_codec.WriteTagAndValue(output, ByteStride);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Target != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (buffer_ != null) {
        size += _single_buffer_codec.CalculateSizeWithTag(Buffer);
      }
      if (byteOffset_ != null) {
        size += _single_byteOffset_codec.CalculateSizeWithTag(ByteOffset);
      }
      if (ByteLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ByteLength);
      }
      if (byteStride_ != null) {
        size += _single_byteStride_codec.CalculateSizeWithTag(ByteStride);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferView other) {
      if (other == null) {
        return;
      }
      if (other.buffer_ != null) {
        if (buffer_ == null || other.Buffer != 0) {
          Buffer = other.Buffer;
        }
      }
      if (other.byteOffset_ != null) {
        if (byteOffset_ == null || other.ByteOffset != 0) {
          ByteOffset = other.ByteOffset;
        }
      }
      if (other.ByteLength != 0) {
        ByteLength = other.ByteLength;
      }
      if (other.byteStride_ != null) {
        if (byteStride_ == null || other.ByteStride != 0) {
          ByteStride = other.ByteStride;
        }
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_buffer_codec.Read(input);
            if (buffer_ == null || value != 0) {
              Buffer = value;
            }
            break;
          }
          case 18: {
            int? value = _single_byteOffset_codec.Read(input);
            if (byteOffset_ == null || value != 0) {
              ByteOffset = value;
            }
            break;
          }
          case 24: {
            ByteLength = input.ReadInt32();
            break;
          }
          case 34: {
            int? value = _single_byteStride_codec.Read(input);
            if (byteStride_ == null || value != 0) {
              ByteStride = value;
            }
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            Target = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/image.schema.json
  /// "oneOf": [
  ///   { "required": [ "uri" ] },
  ///   { "required": [ "bufferView" ] }
  /// ]
  /// </summary>
  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      uri_ = other.uri_;
      mimeType_ = other.mimeType_;
      BufferView = other.BufferView;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 1;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mimeType" field.</summary>
    public const int MimeTypeFieldNumber = 2;
    private string mimeType_ = "";
    /// <summary>
    /// "image/jpeg", "image/png"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MimeType {
      get { return mimeType_; }
      set {
        mimeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bufferView" field.</summary>
    public const int BufferViewFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_bufferView_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? bufferView_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? BufferView {
      get { return bufferView_; }
      set {
        bufferView_ = value;
      }
    }


    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uri != other.Uri) return false;
      if (MimeType != other.MimeType) return false;
      if (BufferView != other.BufferView) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (MimeType.Length != 0) hash ^= MimeType.GetHashCode();
      if (bufferView_ != null) hash ^= BufferView.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uri);
      }
      if (MimeType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MimeType);
      }
      if (bufferView_ != null) {
        _single_bufferView_codec.WriteTagAndValue(output, BufferView);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (MimeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MimeType);
      }
      if (bufferView_ != null) {
        size += _single_bufferView_codec.CalculateSizeWithTag(BufferView);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.MimeType.Length != 0) {
        MimeType = other.MimeType;
      }
      if (other.bufferView_ != null) {
        if (bufferView_ == null || other.BufferView != 0) {
          BufferView = other.BufferView;
        }
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uri = input.ReadString();
            break;
          }
          case 18: {
            MimeType = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_bufferView_codec.Read(input);
            if (bufferView_ == null || value != 0) {
              BufferView = value;
            }
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.normalTextureInfo.schema.json
  /// "required": [ "index" ]
  /// </summary>
  public sealed partial class MaterialNormalTextureInfo : pb::IMessage<MaterialNormalTextureInfo> {
    private static readonly pb::MessageParser<MaterialNormalTextureInfo> _parser = new pb::MessageParser<MaterialNormalTextureInfo>(() => new MaterialNormalTextureInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaterialNormalTextureInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialNormalTextureInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialNormalTextureInfo(MaterialNormalTextureInfo other) : this() {
      Index = other.Index;
      TexCoord = other.TexCoord;
      Scale = other.Scale;
      extensions_ = other.extensions_ != null ? other.extensions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialNormalTextureInfo Clone() {
      return new MaterialNormalTextureInfo(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_index_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }


    /// <summary>Field number for the "texCoord" field.</summary>
    public const int TexCoordFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_texCoord_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? texCoord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? TexCoord {
      get { return texCoord_; }
      set {
        texCoord_ = value;
      }
    }


    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_scale_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }


    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 4;
    private global::VrmProtobuf.MaterialNormalTextureInfo.Types.Extensions extensions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.MaterialNormalTextureInfo.Types.Extensions Extensions {
      get { return extensions_; }
      set {
        extensions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaterialNormalTextureInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaterialNormalTextureInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (TexCoord != other.TexCoord) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Extensions, other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (index_ != null) hash ^= Index.GetHashCode();
      if (texCoord_ != null) hash ^= TexCoord.GetHashCode();
      if (scale_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Scale);
      if (extensions_ != null) hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (index_ != null) {
        _single_index_codec.WriteTagAndValue(output, Index);
      }
      if (texCoord_ != null) {
        _single_texCoord_codec.WriteTagAndValue(output, TexCoord);
      }
      if (scale_ != null) {
        _single_scale_codec.WriteTagAndValue(output, Scale);
      }
      if (extensions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Extensions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (index_ != null) {
        size += _single_index_codec.CalculateSizeWithTag(Index);
      }
      if (texCoord_ != null) {
        size += _single_texCoord_codec.CalculateSizeWithTag(TexCoord);
      }
      if (scale_ != null) {
        size += _single_scale_codec.CalculateSizeWithTag(Scale);
      }
      if (extensions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extensions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaterialNormalTextureInfo other) {
      if (other == null) {
        return;
      }
      if (other.index_ != null) {
        if (index_ == null || other.Index != 0) {
          Index = other.Index;
        }
      }
      if (other.texCoord_ != null) {
        if (texCoord_ == null || other.TexCoord != 0) {
          TexCoord = other.TexCoord;
        }
      }
      if (other.scale_ != null) {
        if (scale_ == null || other.Scale != 0F) {
          Scale = other.Scale;
        }
      }
      if (other.extensions_ != null) {
        if (extensions_ == null) {
          Extensions = new global::VrmProtobuf.MaterialNormalTextureInfo.Types.Extensions();
        }
        Extensions.MergeFrom(other.Extensions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_index_codec.Read(input);
            if (index_ == null || value != 0) {
              Index = value;
            }
            break;
          }
          case 18: {
            int? value = _single_texCoord_codec.Read(input);
            if (texCoord_ == null || value != 0) {
              TexCoord = value;
            }
            break;
          }
          case 26: {
            float? value = _single_scale_codec.Read(input);
            if (scale_ == null || value != 0F) {
              Scale = value;
            }
            break;
          }
          case 34: {
            if (extensions_ == null) {
              Extensions = new global::VrmProtobuf.MaterialNormalTextureInfo.Types.Extensions();
            }
            input.ReadMessage(Extensions);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MaterialNormalTextureInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Extensions : pb::IMessage<Extensions> {
        private static readonly pb::MessageParser<Extensions> _parser = new pb::MessageParser<Extensions>(() => new Extensions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Extensions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VrmProtobuf.MaterialNormalTextureInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extensions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extensions(Extensions other) : this() {
          kHRTextureTransform_ = other.kHRTextureTransform_ != null ? other.kHRTextureTransform_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extensions Clone() {
          return new Extensions(this);
        }

        /// <summary>Field number for the "KHR_texture_transform" field.</summary>
        public const int KHRTextureTransformFieldNumber = 1;
        private global::VrmProtobuf.KHRTextureTransformExtension kHRTextureTransform_;
        /// <summary>
        /// KHR_texture_transform
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VrmProtobuf.KHRTextureTransformExtension KHRTextureTransform {
          get { return kHRTextureTransform_; }
          set {
            kHRTextureTransform_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Extensions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Extensions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(KHRTextureTransform, other.KHRTextureTransform)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (kHRTextureTransform_ != null) hash ^= KHRTextureTransform.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (kHRTextureTransform_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(KHRTextureTransform);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (kHRTextureTransform_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(KHRTextureTransform);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Extensions other) {
          if (other == null) {
            return;
          }
          if (other.kHRTextureTransform_ != null) {
            if (kHRTextureTransform_ == null) {
              KHRTextureTransform = new global::VrmProtobuf.KHRTextureTransformExtension();
            }
            KHRTextureTransform.MergeFrom(other.KHRTextureTransform);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (kHRTextureTransform_ == null) {
                  KHRTextureTransform = new global::VrmProtobuf.KHRTextureTransformExtension();
                }
                input.ReadMessage(KHRTextureTransform);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.occlusionTextureInfo.schema.json
  /// "required": [ "index" ]
  /// </summary>
  public sealed partial class MaterialOcclusionTextureInfo : pb::IMessage<MaterialOcclusionTextureInfo> {
    private static readonly pb::MessageParser<MaterialOcclusionTextureInfo> _parser = new pb::MessageParser<MaterialOcclusionTextureInfo>(() => new MaterialOcclusionTextureInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaterialOcclusionTextureInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialOcclusionTextureInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialOcclusionTextureInfo(MaterialOcclusionTextureInfo other) : this() {
      Index = other.Index;
      TexCoord = other.TexCoord;
      Strength = other.Strength;
      extensions_ = other.extensions_ != null ? other.extensions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialOcclusionTextureInfo Clone() {
      return new MaterialOcclusionTextureInfo(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_index_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }


    /// <summary>Field number for the "texCoord" field.</summary>
    public const int TexCoordFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_texCoord_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? texCoord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? TexCoord {
      get { return texCoord_; }
      set {
        texCoord_ = value;
      }
    }


    /// <summary>Field number for the "strength" field.</summary>
    public const int StrengthFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_strength_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? strength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Strength {
      get { return strength_; }
      set {
        strength_ = value;
      }
    }


    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 4;
    private global::VrmProtobuf.MaterialOcclusionTextureInfo.Types.Extensions extensions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.MaterialOcclusionTextureInfo.Types.Extensions Extensions {
      get { return extensions_; }
      set {
        extensions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaterialOcclusionTextureInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaterialOcclusionTextureInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (TexCoord != other.TexCoord) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Strength, other.Strength)) return false;
      if (!object.Equals(Extensions, other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (index_ != null) hash ^= Index.GetHashCode();
      if (texCoord_ != null) hash ^= TexCoord.GetHashCode();
      if (strength_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Strength);
      if (extensions_ != null) hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (index_ != null) {
        _single_index_codec.WriteTagAndValue(output, Index);
      }
      if (texCoord_ != null) {
        _single_texCoord_codec.WriteTagAndValue(output, TexCoord);
      }
      if (strength_ != null) {
        _single_strength_codec.WriteTagAndValue(output, Strength);
      }
      if (extensions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Extensions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (index_ != null) {
        size += _single_index_codec.CalculateSizeWithTag(Index);
      }
      if (texCoord_ != null) {
        size += _single_texCoord_codec.CalculateSizeWithTag(TexCoord);
      }
      if (strength_ != null) {
        size += _single_strength_codec.CalculateSizeWithTag(Strength);
      }
      if (extensions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extensions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaterialOcclusionTextureInfo other) {
      if (other == null) {
        return;
      }
      if (other.index_ != null) {
        if (index_ == null || other.Index != 0) {
          Index = other.Index;
        }
      }
      if (other.texCoord_ != null) {
        if (texCoord_ == null || other.TexCoord != 0) {
          TexCoord = other.TexCoord;
        }
      }
      if (other.strength_ != null) {
        if (strength_ == null || other.Strength != 0F) {
          Strength = other.Strength;
        }
      }
      if (other.extensions_ != null) {
        if (extensions_ == null) {
          Extensions = new global::VrmProtobuf.MaterialOcclusionTextureInfo.Types.Extensions();
        }
        Extensions.MergeFrom(other.Extensions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_index_codec.Read(input);
            if (index_ == null || value != 0) {
              Index = value;
            }
            break;
          }
          case 18: {
            int? value = _single_texCoord_codec.Read(input);
            if (texCoord_ == null || value != 0) {
              TexCoord = value;
            }
            break;
          }
          case 26: {
            float? value = _single_strength_codec.Read(input);
            if (strength_ == null || value != 0F) {
              Strength = value;
            }
            break;
          }
          case 34: {
            if (extensions_ == null) {
              Extensions = new global::VrmProtobuf.MaterialOcclusionTextureInfo.Types.Extensions();
            }
            input.ReadMessage(Extensions);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MaterialOcclusionTextureInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Extensions : pb::IMessage<Extensions> {
        private static readonly pb::MessageParser<Extensions> _parser = new pb::MessageParser<Extensions>(() => new Extensions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Extensions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VrmProtobuf.MaterialOcclusionTextureInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extensions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extensions(Extensions other) : this() {
          kHRTextureTransform_ = other.kHRTextureTransform_ != null ? other.kHRTextureTransform_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extensions Clone() {
          return new Extensions(this);
        }

        /// <summary>Field number for the "KHR_texture_transform" field.</summary>
        public const int KHRTextureTransformFieldNumber = 1;
        private global::VrmProtobuf.KHRTextureTransformExtension kHRTextureTransform_;
        /// <summary>
        /// KHR_texture_transform
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VrmProtobuf.KHRTextureTransformExtension KHRTextureTransform {
          get { return kHRTextureTransform_; }
          set {
            kHRTextureTransform_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Extensions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Extensions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(KHRTextureTransform, other.KHRTextureTransform)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (kHRTextureTransform_ != null) hash ^= KHRTextureTransform.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (kHRTextureTransform_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(KHRTextureTransform);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (kHRTextureTransform_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(KHRTextureTransform);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Extensions other) {
          if (other == null) {
            return;
          }
          if (other.kHRTextureTransform_ != null) {
            if (kHRTextureTransform_ == null) {
              KHRTextureTransform = new global::VrmProtobuf.KHRTextureTransformExtension();
            }
            KHRTextureTransform.MergeFrom(other.KHRTextureTransform);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (kHRTextureTransform_ == null) {
                  KHRTextureTransform = new global::VrmProtobuf.KHRTextureTransformExtension();
                }
                input.ReadMessage(KHRTextureTransform);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.pbrMetallicRoughness.schema.json
  /// </summary>
  public sealed partial class MaterialPbrMetallicRoughness : pb::IMessage<MaterialPbrMetallicRoughness> {
    private static readonly pb::MessageParser<MaterialPbrMetallicRoughness> _parser = new pb::MessageParser<MaterialPbrMetallicRoughness>(() => new MaterialPbrMetallicRoughness());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaterialPbrMetallicRoughness> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialPbrMetallicRoughness() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialPbrMetallicRoughness(MaterialPbrMetallicRoughness other) : this() {
      baseColorFactor_ = other.baseColorFactor_.Clone();
      baseColorTexture_ = other.baseColorTexture_ != null ? other.baseColorTexture_.Clone() : null;
      MetallicFactor = other.MetallicFactor;
      RoughnessFactor = other.RoughnessFactor;
      metallicRoughnessTexture_ = other.metallicRoughnessTexture_ != null ? other.metallicRoughnessTexture_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialPbrMetallicRoughness Clone() {
      return new MaterialPbrMetallicRoughness(this);
    }

    /// <summary>Field number for the "baseColorFactor" field.</summary>
    public const int BaseColorFactorFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_baseColorFactor_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> baseColorFactor_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// RGBA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> BaseColorFactor {
      get { return baseColorFactor_; }
    }

    /// <summary>Field number for the "baseColorTexture" field.</summary>
    public const int BaseColorTextureFieldNumber = 2;
    private global::VrmProtobuf.TextureInfo baseColorTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.TextureInfo BaseColorTexture {
      get { return baseColorTexture_; }
      set {
        baseColorTexture_ = value;
      }
    }

    /// <summary>Field number for the "metallicFactor" field.</summary>
    public const int MetallicFactorFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_metallicFactor_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? metallicFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? MetallicFactor {
      get { return metallicFactor_; }
      set {
        metallicFactor_ = value;
      }
    }


    /// <summary>Field number for the "roughnessFactor" field.</summary>
    public const int RoughnessFactorFieldNumber = 4;
    private static readonly pb::FieldCodec<float?> _single_roughnessFactor_codec = pb::FieldCodec.ForStructWrapper<float>(34);
    private float? roughnessFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? RoughnessFactor {
      get { return roughnessFactor_; }
      set {
        roughnessFactor_ = value;
      }
    }


    /// <summary>Field number for the "metallicRoughnessTexture" field.</summary>
    public const int MetallicRoughnessTextureFieldNumber = 5;
    private global::VrmProtobuf.TextureInfo metallicRoughnessTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.TextureInfo MetallicRoughnessTexture {
      get { return metallicRoughnessTexture_; }
      set {
        metallicRoughnessTexture_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaterialPbrMetallicRoughness);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaterialPbrMetallicRoughness other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!baseColorFactor_.Equals(other.baseColorFactor_)) return false;
      if (!object.Equals(BaseColorTexture, other.BaseColorTexture)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(MetallicFactor, other.MetallicFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(RoughnessFactor, other.RoughnessFactor)) return false;
      if (!object.Equals(MetallicRoughnessTexture, other.MetallicRoughnessTexture)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= baseColorFactor_.GetHashCode();
      if (baseColorTexture_ != null) hash ^= BaseColorTexture.GetHashCode();
      if (metallicFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(MetallicFactor);
      if (roughnessFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(RoughnessFactor);
      if (metallicRoughnessTexture_ != null) hash ^= MetallicRoughnessTexture.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      baseColorFactor_.WriteTo(output, _repeated_baseColorFactor_codec);
      if (baseColorTexture_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BaseColorTexture);
      }
      if (metallicFactor_ != null) {
        _single_metallicFactor_codec.WriteTagAndValue(output, MetallicFactor);
      }
      if (roughnessFactor_ != null) {
        _single_roughnessFactor_codec.WriteTagAndValue(output, RoughnessFactor);
      }
      if (metallicRoughnessTexture_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MetallicRoughnessTexture);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += baseColorFactor_.CalculateSize(_repeated_baseColorFactor_codec);
      if (baseColorTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseColorTexture);
      }
      if (metallicFactor_ != null) {
        size += _single_metallicFactor_codec.CalculateSizeWithTag(MetallicFactor);
      }
      if (roughnessFactor_ != null) {
        size += _single_roughnessFactor_codec.CalculateSizeWithTag(RoughnessFactor);
      }
      if (metallicRoughnessTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetallicRoughnessTexture);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaterialPbrMetallicRoughness other) {
      if (other == null) {
        return;
      }
      baseColorFactor_.Add(other.baseColorFactor_);
      if (other.baseColorTexture_ != null) {
        if (baseColorTexture_ == null) {
          BaseColorTexture = new global::VrmProtobuf.TextureInfo();
        }
        BaseColorTexture.MergeFrom(other.BaseColorTexture);
      }
      if (other.metallicFactor_ != null) {
        if (metallicFactor_ == null || other.MetallicFactor != 0F) {
          MetallicFactor = other.MetallicFactor;
        }
      }
      if (other.roughnessFactor_ != null) {
        if (roughnessFactor_ == null || other.RoughnessFactor != 0F) {
          RoughnessFactor = other.RoughnessFactor;
        }
      }
      if (other.metallicRoughnessTexture_ != null) {
        if (metallicRoughnessTexture_ == null) {
          MetallicRoughnessTexture = new global::VrmProtobuf.TextureInfo();
        }
        MetallicRoughnessTexture.MergeFrom(other.MetallicRoughnessTexture);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            baseColorFactor_.AddEntriesFrom(input, _repeated_baseColorFactor_codec);
            break;
          }
          case 18: {
            if (baseColorTexture_ == null) {
              BaseColorTexture = new global::VrmProtobuf.TextureInfo();
            }
            input.ReadMessage(BaseColorTexture);
            break;
          }
          case 26: {
            float? value = _single_metallicFactor_codec.Read(input);
            if (metallicFactor_ == null || value != 0F) {
              MetallicFactor = value;
            }
            break;
          }
          case 34: {
            float? value = _single_roughnessFactor_codec.Read(input);
            if (roughnessFactor_ == null || value != 0F) {
              RoughnessFactor = value;
            }
            break;
          }
          case 42: {
            if (metallicRoughnessTexture_ == null) {
              MetallicRoughnessTexture = new global::VrmProtobuf.TextureInfo();
            }
            input.ReadMessage(MetallicRoughnessTexture);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KHR_materials_unlit : pb::IMessage<KHR_materials_unlit> {
    private static readonly pb::MessageParser<KHR_materials_unlit> _parser = new pb::MessageParser<KHR_materials_unlit>(() => new KHR_materials_unlit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KHR_materials_unlit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KHR_materials_unlit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KHR_materials_unlit(KHR_materials_unlit other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KHR_materials_unlit Clone() {
      return new KHR_materials_unlit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KHR_materials_unlit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KHR_materials_unlit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KHR_materials_unlit other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.schema.json
  /// </summary>
  public sealed partial class Material : pb::IMessage<Material> {
    private static readonly pb::MessageParser<Material> _parser = new pb::MessageParser<Material>(() => new Material());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Material> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material(Material other) : this() {
      name_ = other.name_;
      pbrMetallicRoughness_ = other.pbrMetallicRoughness_ != null ? other.pbrMetallicRoughness_.Clone() : null;
      normalTexture_ = other.normalTexture_ != null ? other.normalTexture_.Clone() : null;
      occlusionTexture_ = other.occlusionTexture_ != null ? other.occlusionTexture_.Clone() : null;
      emissiveTexture_ = other.emissiveTexture_ != null ? other.emissiveTexture_.Clone() : null;
      emissiveFactor_ = other.emissiveFactor_.Clone();
      alphaMode_ = other.alphaMode_;
      AlphaCutoff = other.AlphaCutoff;
      DoubleSided = other.DoubleSided;
      extensions_ = other.extensions_ != null ? other.extensions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material Clone() {
      return new Material(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pbrMetallicRoughness" field.</summary>
    public const int PbrMetallicRoughnessFieldNumber = 2;
    private global::VrmProtobuf.MaterialPbrMetallicRoughness pbrMetallicRoughness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.MaterialPbrMetallicRoughness PbrMetallicRoughness {
      get { return pbrMetallicRoughness_; }
      set {
        pbrMetallicRoughness_ = value;
      }
    }

    /// <summary>Field number for the "normalTexture" field.</summary>
    public const int NormalTextureFieldNumber = 3;
    private global::VrmProtobuf.MaterialNormalTextureInfo normalTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.MaterialNormalTextureInfo NormalTexture {
      get { return normalTexture_; }
      set {
        normalTexture_ = value;
      }
    }

    /// <summary>Field number for the "occlusionTexture" field.</summary>
    public const int OcclusionTextureFieldNumber = 4;
    private global::VrmProtobuf.MaterialOcclusionTextureInfo occlusionTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.MaterialOcclusionTextureInfo OcclusionTexture {
      get { return occlusionTexture_; }
      set {
        occlusionTexture_ = value;
      }
    }

    /// <summary>Field number for the "emissiveTexture" field.</summary>
    public const int EmissiveTextureFieldNumber = 5;
    private global::VrmProtobuf.TextureInfo emissiveTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.TextureInfo EmissiveTexture {
      get { return emissiveTexture_; }
      set {
        emissiveTexture_ = value;
      }
    }

    /// <summary>Field number for the "emissiveFactor" field.</summary>
    public const int EmissiveFactorFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_emissiveFactor_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> emissiveFactor_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// RGB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> EmissiveFactor {
      get { return emissiveFactor_; }
    }

    /// <summary>Field number for the "alphaMode" field.</summary>
    public const int AlphaModeFieldNumber = 7;
    private string alphaMode_ = "";
    /// <summary>
    /// "OPAQUE", "MASK", "BLEND"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlphaMode {
      get { return alphaMode_; }
      set {
        alphaMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alphaCutoff" field.</summary>
    public const int AlphaCutoffFieldNumber = 8;
    private static readonly pb::FieldCodec<float?> _single_alphaCutoff_codec = pb::FieldCodec.ForStructWrapper<float>(66);
    private float? alphaCutoff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? AlphaCutoff {
      get { return alphaCutoff_; }
      set {
        alphaCutoff_ = value;
      }
    }


    /// <summary>Field number for the "doubleSided" field.</summary>
    public const int DoubleSidedFieldNumber = 9;
    private static readonly pb::FieldCodec<bool?> _single_doubleSided_codec = pb::FieldCodec.ForStructWrapper<bool>(74);
    private bool? doubleSided_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? DoubleSided {
      get { return doubleSided_; }
      set {
        doubleSided_ = value;
      }
    }


    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 10;
    private global::VrmProtobuf.Material.Types.Extensions extensions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.Material.Types.Extensions Extensions {
      get { return extensions_; }
      set {
        extensions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Material);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Material other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(PbrMetallicRoughness, other.PbrMetallicRoughness)) return false;
      if (!object.Equals(NormalTexture, other.NormalTexture)) return false;
      if (!object.Equals(OcclusionTexture, other.OcclusionTexture)) return false;
      if (!object.Equals(EmissiveTexture, other.EmissiveTexture)) return false;
      if(!emissiveFactor_.Equals(other.emissiveFactor_)) return false;
      if (AlphaMode != other.AlphaMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(AlphaCutoff, other.AlphaCutoff)) return false;
      if (DoubleSided != other.DoubleSided) return false;
      if (!object.Equals(Extensions, other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (pbrMetallicRoughness_ != null) hash ^= PbrMetallicRoughness.GetHashCode();
      if (normalTexture_ != null) hash ^= NormalTexture.GetHashCode();
      if (occlusionTexture_ != null) hash ^= OcclusionTexture.GetHashCode();
      if (emissiveTexture_ != null) hash ^= EmissiveTexture.GetHashCode();
      hash ^= emissiveFactor_.GetHashCode();
      if (AlphaMode.Length != 0) hash ^= AlphaMode.GetHashCode();
      if (alphaCutoff_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(AlphaCutoff);
      if (doubleSided_ != null) hash ^= DoubleSided.GetHashCode();
      if (extensions_ != null) hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (pbrMetallicRoughness_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PbrMetallicRoughness);
      }
      if (normalTexture_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NormalTexture);
      }
      if (occlusionTexture_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OcclusionTexture);
      }
      if (emissiveTexture_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EmissiveTexture);
      }
      emissiveFactor_.WriteTo(output, _repeated_emissiveFactor_codec);
      if (AlphaMode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AlphaMode);
      }
      if (alphaCutoff_ != null) {
        _single_alphaCutoff_codec.WriteTagAndValue(output, AlphaCutoff);
      }
      if (doubleSided_ != null) {
        _single_doubleSided_codec.WriteTagAndValue(output, DoubleSided);
      }
      if (extensions_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Extensions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (pbrMetallicRoughness_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PbrMetallicRoughness);
      }
      if (normalTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalTexture);
      }
      if (occlusionTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OcclusionTexture);
      }
      if (emissiveTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmissiveTexture);
      }
      size += emissiveFactor_.CalculateSize(_repeated_emissiveFactor_codec);
      if (AlphaMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlphaMode);
      }
      if (alphaCutoff_ != null) {
        size += _single_alphaCutoff_codec.CalculateSizeWithTag(AlphaCutoff);
      }
      if (doubleSided_ != null) {
        size += _single_doubleSided_codec.CalculateSizeWithTag(DoubleSided);
      }
      if (extensions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extensions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Material other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.pbrMetallicRoughness_ != null) {
        if (pbrMetallicRoughness_ == null) {
          PbrMetallicRoughness = new global::VrmProtobuf.MaterialPbrMetallicRoughness();
        }
        PbrMetallicRoughness.MergeFrom(other.PbrMetallicRoughness);
      }
      if (other.normalTexture_ != null) {
        if (normalTexture_ == null) {
          NormalTexture = new global::VrmProtobuf.MaterialNormalTextureInfo();
        }
        NormalTexture.MergeFrom(other.NormalTexture);
      }
      if (other.occlusionTexture_ != null) {
        if (occlusionTexture_ == null) {
          OcclusionTexture = new global::VrmProtobuf.MaterialOcclusionTextureInfo();
        }
        OcclusionTexture.MergeFrom(other.OcclusionTexture);
      }
      if (other.emissiveTexture_ != null) {
        if (emissiveTexture_ == null) {
          EmissiveTexture = new global::VrmProtobuf.TextureInfo();
        }
        EmissiveTexture.MergeFrom(other.EmissiveTexture);
      }
      emissiveFactor_.Add(other.emissiveFactor_);
      if (other.AlphaMode.Length != 0) {
        AlphaMode = other.AlphaMode;
      }
      if (other.alphaCutoff_ != null) {
        if (alphaCutoff_ == null || other.AlphaCutoff != 0F) {
          AlphaCutoff = other.AlphaCutoff;
        }
      }
      if (other.doubleSided_ != null) {
        if (doubleSided_ == null || other.DoubleSided != false) {
          DoubleSided = other.DoubleSided;
        }
      }
      if (other.extensions_ != null) {
        if (extensions_ == null) {
          Extensions = new global::VrmProtobuf.Material.Types.Extensions();
        }
        Extensions.MergeFrom(other.Extensions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (pbrMetallicRoughness_ == null) {
              PbrMetallicRoughness = new global::VrmProtobuf.MaterialPbrMetallicRoughness();
            }
            input.ReadMessage(PbrMetallicRoughness);
            break;
          }
          case 26: {
            if (normalTexture_ == null) {
              NormalTexture = new global::VrmProtobuf.MaterialNormalTextureInfo();
            }
            input.ReadMessage(NormalTexture);
            break;
          }
          case 34: {
            if (occlusionTexture_ == null) {
              OcclusionTexture = new global::VrmProtobuf.MaterialOcclusionTextureInfo();
            }
            input.ReadMessage(OcclusionTexture);
            break;
          }
          case 42: {
            if (emissiveTexture_ == null) {
              EmissiveTexture = new global::VrmProtobuf.TextureInfo();
            }
            input.ReadMessage(EmissiveTexture);
            break;
          }
          case 50:
          case 53: {
            emissiveFactor_.AddEntriesFrom(input, _repeated_emissiveFactor_codec);
            break;
          }
          case 58: {
            AlphaMode = input.ReadString();
            break;
          }
          case 66: {
            float? value = _single_alphaCutoff_codec.Read(input);
            if (alphaCutoff_ == null || value != 0F) {
              AlphaCutoff = value;
            }
            break;
          }
          case 74: {
            bool? value = _single_doubleSided_codec.Read(input);
            if (doubleSided_ == null || value != false) {
              DoubleSided = value;
            }
            break;
          }
          case 82: {
            if (extensions_ == null) {
              Extensions = new global::VrmProtobuf.Material.Types.Extensions();
            }
            input.ReadMessage(Extensions);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Material message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Extensions : pb::IMessage<Extensions> {
        private static readonly pb::MessageParser<Extensions> _parser = new pb::MessageParser<Extensions>(() => new Extensions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Extensions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VrmProtobuf.Material.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extensions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extensions(Extensions other) : this() {
          kHRMaterialsUnlit_ = other.kHRMaterialsUnlit_ != null ? other.kHRMaterialsUnlit_.Clone() : null;
          vRMCMaterialsMtoon_ = other.vRMCMaterialsMtoon_ != null ? other.vRMCMaterialsMtoon_.Clone() : null;
          kHRMaterialsPbrSpecularGlossiness_ = other.kHRMaterialsPbrSpecularGlossiness_ != null ? other.kHRMaterialsPbrSpecularGlossiness_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extensions Clone() {
          return new Extensions(this);
        }

        /// <summary>Field number for the "KHR_materials_unlit" field.</summary>
        public const int KHRMaterialsUnlitFieldNumber = 1;
        private global::VrmProtobuf.KHR_materials_unlit kHRMaterialsUnlit_;
        /// <summary>
        /// unlit
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VrmProtobuf.KHR_materials_unlit KHRMaterialsUnlit {
          get { return kHRMaterialsUnlit_; }
          set {
            kHRMaterialsUnlit_ = value;
          }
        }

        /// <summary>Field number for the "VRMC_materials_mtoon" field.</summary>
        public const int VRMCMaterialsMtoonFieldNumber = 2;
        private global::VrmProtobuf.VRMC_materials_mtoon vRMCMaterialsMtoon_;
        /// <summary>
        /// MToon extension
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VrmProtobuf.VRMC_materials_mtoon VRMCMaterialsMtoon {
          get { return vRMCMaterialsMtoon_; }
          set {
            vRMCMaterialsMtoon_ = value;
          }
        }

        /// <summary>Field number for the "KHR_materials_pbrSpecularGlossiness" field.</summary>
        public const int KHRMaterialsPbrSpecularGlossinessFieldNumber = 3;
        private global::VrmProtobuf.KHRMaterialsPbrSpecularGlossinessExtension kHRMaterialsPbrSpecularGlossiness_;
        /// <summary>
        /// This extension defines the specular-glossiness material model from
        /// Physically-Based Rendering (PBR).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VrmProtobuf.KHRMaterialsPbrSpecularGlossinessExtension KHRMaterialsPbrSpecularGlossiness {
          get { return kHRMaterialsPbrSpecularGlossiness_; }
          set {
            kHRMaterialsPbrSpecularGlossiness_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Extensions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Extensions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(KHRMaterialsUnlit, other.KHRMaterialsUnlit)) return false;
          if (!object.Equals(VRMCMaterialsMtoon, other.VRMCMaterialsMtoon)) return false;
          if (!object.Equals(KHRMaterialsPbrSpecularGlossiness, other.KHRMaterialsPbrSpecularGlossiness)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (kHRMaterialsUnlit_ != null) hash ^= KHRMaterialsUnlit.GetHashCode();
          if (vRMCMaterialsMtoon_ != null) hash ^= VRMCMaterialsMtoon.GetHashCode();
          if (kHRMaterialsPbrSpecularGlossiness_ != null) hash ^= KHRMaterialsPbrSpecularGlossiness.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (kHRMaterialsUnlit_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(KHRMaterialsUnlit);
          }
          if (vRMCMaterialsMtoon_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(VRMCMaterialsMtoon);
          }
          if (kHRMaterialsPbrSpecularGlossiness_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(KHRMaterialsPbrSpecularGlossiness);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (kHRMaterialsUnlit_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(KHRMaterialsUnlit);
          }
          if (vRMCMaterialsMtoon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(VRMCMaterialsMtoon);
          }
          if (kHRMaterialsPbrSpecularGlossiness_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(KHRMaterialsPbrSpecularGlossiness);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Extensions other) {
          if (other == null) {
            return;
          }
          if (other.kHRMaterialsUnlit_ != null) {
            if (kHRMaterialsUnlit_ == null) {
              KHRMaterialsUnlit = new global::VrmProtobuf.KHR_materials_unlit();
            }
            KHRMaterialsUnlit.MergeFrom(other.KHRMaterialsUnlit);
          }
          if (other.vRMCMaterialsMtoon_ != null) {
            if (vRMCMaterialsMtoon_ == null) {
              VRMCMaterialsMtoon = new global::VrmProtobuf.VRMC_materials_mtoon();
            }
            VRMCMaterialsMtoon.MergeFrom(other.VRMCMaterialsMtoon);
          }
          if (other.kHRMaterialsPbrSpecularGlossiness_ != null) {
            if (kHRMaterialsPbrSpecularGlossiness_ == null) {
              KHRMaterialsPbrSpecularGlossiness = new global::VrmProtobuf.KHRMaterialsPbrSpecularGlossinessExtension();
            }
            KHRMaterialsPbrSpecularGlossiness.MergeFrom(other.KHRMaterialsPbrSpecularGlossiness);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (kHRMaterialsUnlit_ == null) {
                  KHRMaterialsUnlit = new global::VrmProtobuf.KHR_materials_unlit();
                }
                input.ReadMessage(KHRMaterialsUnlit);
                break;
              }
              case 18: {
                if (vRMCMaterialsMtoon_ == null) {
                  VRMCMaterialsMtoon = new global::VrmProtobuf.VRMC_materials_mtoon();
                }
                input.ReadMessage(VRMCMaterialsMtoon);
                break;
              }
              case 26: {
                if (kHRMaterialsPbrSpecularGlossiness_ == null) {
                  KHRMaterialsPbrSpecularGlossiness = new global::VrmProtobuf.KHRMaterialsPbrSpecularGlossinessExtension();
                }
                input.ReadMessage(KHRMaterialsPbrSpecularGlossiness);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/mesh.primitive.schema.json
  /// "required": [ "attributes" ]
  /// </summary>
  public sealed partial class MeshPrimitive : pb::IMessage<MeshPrimitive> {
    private static readonly pb::MessageParser<MeshPrimitive> _parser = new pb::MessageParser<MeshPrimitive>(() => new MeshPrimitive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeshPrimitive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshPrimitive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshPrimitive(MeshPrimitive other) : this() {
      attributes_ = other.attributes_.Clone();
      Indices = other.Indices;
      Material = other.Material;
      Mode = other.Mode;
      targets_ = other.targets_.Clone();
      extras_ = other.extras_ != null ? other.extras_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshPrimitive Clone() {
      return new MeshPrimitive(this);
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 1;
    private static readonly pbc::MapField<string, int>.Codec _map_attributes_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt32(16, 0), 10);
    private readonly pbc::MapField<string, int> attributes_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> Attributes {
      get { return attributes_; }
    }

    /// <summary>Field number for the "indices" field.</summary>
    public const int IndicesFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_indices_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? indices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Indices {
      get { return indices_; }
      set {
        indices_ = value;
      }
    }


    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_material_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }


    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 4;
    private static readonly pb::FieldCodec<int?> _single_mode_codec = pb::FieldCodec.ForStructWrapper<int>(34);
    private int? mode_;
    /// <summary>
    /// enum Mode {
    ///   POINTS = 0;
    ///   LINES = 1;
    ///   LINE_LOOP = 2;
    ///   LINE_STRIP = 3;
    ///   TRIANGLES = 4;
    ///   TRIANGLE_STRIP = 5;
    ///   TRIANGLE_FAN = 6;
    /// }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }


    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::VrmProtobuf.MeshPrimitive.Types.Target> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(42, global::VrmProtobuf.MeshPrimitive.Types.Target.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.MeshPrimitive.Types.Target> targets_ = new pbc::RepeatedField<global::VrmProtobuf.MeshPrimitive.Types.Target>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.MeshPrimitive.Types.Target> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "extras" field.</summary>
    public const int ExtrasFieldNumber = 6;
    private global::VrmProtobuf.MeshPrimitive.Types.Extras extras_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.MeshPrimitive.Types.Extras Extras {
      get { return extras_; }
      set {
        extras_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeshPrimitive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeshPrimitive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Attributes.Equals(other.Attributes)) return false;
      if (Indices != other.Indices) return false;
      if (Material != other.Material) return false;
      if (Mode != other.Mode) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if (!object.Equals(Extras, other.Extras)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Attributes.GetHashCode();
      if (indices_ != null) hash ^= Indices.GetHashCode();
      if (material_ != null) hash ^= Material.GetHashCode();
      if (mode_ != null) hash ^= Mode.GetHashCode();
      hash ^= targets_.GetHashCode();
      if (extras_ != null) hash ^= Extras.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attributes_.WriteTo(output, _map_attributes_codec);
      if (indices_ != null) {
        _single_indices_codec.WriteTagAndValue(output, Indices);
      }
      if (material_ != null) {
        _single_material_codec.WriteTagAndValue(output, Material);
      }
      if (mode_ != null) {
        _single_mode_codec.WriteTagAndValue(output, Mode);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      if (extras_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Extras);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attributes_.CalculateSize(_map_attributes_codec);
      if (indices_ != null) {
        size += _single_indices_codec.CalculateSizeWithTag(Indices);
      }
      if (material_ != null) {
        size += _single_material_codec.CalculateSizeWithTag(Material);
      }
      if (mode_ != null) {
        size += _single_mode_codec.CalculateSizeWithTag(Mode);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (extras_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extras);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeshPrimitive other) {
      if (other == null) {
        return;
      }
      attributes_.Add(other.attributes_);
      if (other.indices_ != null) {
        if (indices_ == null || other.Indices != 0) {
          Indices = other.Indices;
        }
      }
      if (other.material_ != null) {
        if (material_ == null || other.Material != 0) {
          Material = other.Material;
        }
      }
      if (other.mode_ != null) {
        if (mode_ == null || other.Mode != 0) {
          Mode = other.Mode;
        }
      }
      targets_.Add(other.targets_);
      if (other.extras_ != null) {
        if (extras_ == null) {
          Extras = new global::VrmProtobuf.MeshPrimitive.Types.Extras();
        }
        Extras.MergeFrom(other.Extras);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attributes_.AddEntriesFrom(input, _map_attributes_codec);
            break;
          }
          case 18: {
            int? value = _single_indices_codec.Read(input);
            if (indices_ == null || value != 0) {
              Indices = value;
            }
            break;
          }
          case 26: {
            int? value = _single_material_codec.Read(input);
            if (material_ == null || value != 0) {
              Material = value;
            }
            break;
          }
          case 34: {
            int? value = _single_mode_codec.Read(input);
            if (mode_ == null || value != 0) {
              Mode = value;
            }
            break;
          }
          case 42: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 50: {
            if (extras_ == null) {
              Extras = new global::VrmProtobuf.MeshPrimitive.Types.Extras();
            }
            input.ReadMessage(Extras);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MeshPrimitive message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Target : pb::IMessage<Target> {
        private static readonly pb::MessageParser<Target> _parser = new pb::MessageParser<Target>(() => new Target());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Target> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VrmProtobuf.MeshPrimitive.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Target() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Target(Target other) : this() {
          POSITION = other.POSITION;
          NORMAL = other.NORMAL;
          TANGENT = other.TANGENT;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Target Clone() {
          return new Target(this);
        }

        /// <summary>Field number for the "POSITION" field.</summary>
        public const int POSITIONFieldNumber = 1;
        private static readonly pb::FieldCodec<int?> _single_pOSITION_codec = pb::FieldCodec.ForStructWrapper<int>(10);
        private int? pOSITION_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int? POSITION {
          get { return pOSITION_; }
          set {
            pOSITION_ = value;
          }
        }


        /// <summary>Field number for the "NORMAL" field.</summary>
        public const int NORMALFieldNumber = 2;
        private static readonly pb::FieldCodec<int?> _single_nORMAL_codec = pb::FieldCodec.ForStructWrapper<int>(18);
        private int? nORMAL_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int? NORMAL {
          get { return nORMAL_; }
          set {
            nORMAL_ = value;
          }
        }


        /// <summary>Field number for the "TANGENT" field.</summary>
        public const int TANGENTFieldNumber = 3;
        private static readonly pb::FieldCodec<int?> _single_tANGENT_codec = pb::FieldCodec.ForStructWrapper<int>(26);
        private int? tANGENT_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int? TANGENT {
          get { return tANGENT_; }
          set {
            tANGENT_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Target);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Target other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (POSITION != other.POSITION) return false;
          if (NORMAL != other.NORMAL) return false;
          if (TANGENT != other.TANGENT) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (pOSITION_ != null) hash ^= POSITION.GetHashCode();
          if (nORMAL_ != null) hash ^= NORMAL.GetHashCode();
          if (tANGENT_ != null) hash ^= TANGENT.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (pOSITION_ != null) {
            _single_pOSITION_codec.WriteTagAndValue(output, POSITION);
          }
          if (nORMAL_ != null) {
            _single_nORMAL_codec.WriteTagAndValue(output, NORMAL);
          }
          if (tANGENT_ != null) {
            _single_tANGENT_codec.WriteTagAndValue(output, TANGENT);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (pOSITION_ != null) {
            size += _single_pOSITION_codec.CalculateSizeWithTag(POSITION);
          }
          if (nORMAL_ != null) {
            size += _single_nORMAL_codec.CalculateSizeWithTag(NORMAL);
          }
          if (tANGENT_ != null) {
            size += _single_tANGENT_codec.CalculateSizeWithTag(TANGENT);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Target other) {
          if (other == null) {
            return;
          }
          if (other.pOSITION_ != null) {
            if (pOSITION_ == null || other.POSITION != 0) {
              POSITION = other.POSITION;
            }
          }
          if (other.nORMAL_ != null) {
            if (nORMAL_ == null || other.NORMAL != 0) {
              NORMAL = other.NORMAL;
            }
          }
          if (other.tANGENT_ != null) {
            if (tANGENT_ == null || other.TANGENT != 0) {
              TANGENT = other.TANGENT;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                int? value = _single_pOSITION_codec.Read(input);
                if (pOSITION_ == null || value != 0) {
                  POSITION = value;
                }
                break;
              }
              case 18: {
                int? value = _single_nORMAL_codec.Read(input);
                if (nORMAL_ == null || value != 0) {
                  NORMAL = value;
                }
                break;
              }
              case 26: {
                int? value = _single_tANGENT_codec.Read(input);
                if (tANGENT_ == null || value != 0) {
                  TANGENT = value;
                }
                break;
              }
            }
          }
        }

      }

      public sealed partial class Extras : pb::IMessage<Extras> {
        private static readonly pb::MessageParser<Extras> _parser = new pb::MessageParser<Extras>(() => new Extras());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Extras> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VrmProtobuf.MeshPrimitive.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extras() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extras(Extras other) : this() {
          targetNames_ = other.targetNames_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extras Clone() {
          return new Extras(this);
        }

        /// <summary>Field number for the "targetNames" field.</summary>
        public const int TargetNamesFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_targetNames_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> targetNames_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// https://github.com/KhronosGroup/glTF/issues/1036
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> TargetNames {
          get { return targetNames_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Extras);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Extras other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!targetNames_.Equals(other.targetNames_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= targetNames_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          targetNames_.WriteTo(output, _repeated_targetNames_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += targetNames_.CalculateSize(_repeated_targetNames_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Extras other) {
          if (other == null) {
            return;
          }
          targetNames_.Add(other.targetNames_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                targetNames_.AddEntriesFrom(input, _repeated_targetNames_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/mesh.schema.json
  /// </summary>
  public sealed partial class Mesh : pb::IMessage<Mesh> {
    private static readonly pb::MessageParser<Mesh> _parser = new pb::MessageParser<Mesh>(() => new Mesh());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mesh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh(Mesh other) : this() {
      primitives_ = other.primitives_.Clone();
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh Clone() {
      return new Mesh(this);
    }

    /// <summary>Field number for the "primitives" field.</summary>
    public const int PrimitivesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VrmProtobuf.MeshPrimitive> _repeated_primitives_codec
        = pb::FieldCodec.ForMessage(18, global::VrmProtobuf.MeshPrimitive.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.MeshPrimitive> primitives_ = new pbc::RepeatedField<global::VrmProtobuf.MeshPrimitive>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.MeshPrimitive> Primitives {
      get { return primitives_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// weights
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mesh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!primitives_.Equals(other.primitives_)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= primitives_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      primitives_.WriteTo(output, _repeated_primitives_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += primitives_.CalculateSize(_repeated_primitives_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mesh other) {
      if (other == null) {
        return;
      }
      primitives_.Add(other.primitives_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            primitives_.AddEntriesFrom(input, _repeated_primitives_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/node.schema.json
  /// </summary>
  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      name_ = other.name_;
      children_ = other.children_.Clone();
      matrix_ = other.matrix_.Clone();
      rotation_ = other.rotation_.Clone();
      scale_ = other.scale_.Clone();
      translation_ = other.translation_.Clone();
      Mesh = other.Mesh;
      Skin = other.Skin;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_children_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> children_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "matrix" field.</summary>
    public const int MatrixFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_matrix_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> matrix_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// float[16]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Matrix {
      get { return matrix_; }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_rotation_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> rotation_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// float[4]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Rotation {
      get { return rotation_; }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_scale_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> scale_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// float[3]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Scale {
      get { return scale_; }
    }

    /// <summary>Field number for the "translation" field.</summary>
    public const int TranslationFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_translation_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> translation_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// float[3]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Translation {
      get { return translation_; }
    }

    /// <summary>Field number for the "mesh" field.</summary>
    public const int MeshFieldNumber = 7;
    private static readonly pb::FieldCodec<int?> _single_mesh_codec = pb::FieldCodec.ForStructWrapper<int>(58);
    private int? mesh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Mesh {
      get { return mesh_; }
      set {
        mesh_ = value;
      }
    }


    /// <summary>Field number for the "skin" field.</summary>
    public const int SkinFieldNumber = 8;
    private static readonly pb::FieldCodec<int?> _single_skin_codec = pb::FieldCodec.ForStructWrapper<int>(66);
    private int? skin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Skin {
      get { return skin_; }
      set {
        skin_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!children_.Equals(other.children_)) return false;
      if(!matrix_.Equals(other.matrix_)) return false;
      if(!rotation_.Equals(other.rotation_)) return false;
      if(!scale_.Equals(other.scale_)) return false;
      if(!translation_.Equals(other.translation_)) return false;
      if (Mesh != other.Mesh) return false;
      if (Skin != other.Skin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= children_.GetHashCode();
      hash ^= matrix_.GetHashCode();
      hash ^= rotation_.GetHashCode();
      hash ^= scale_.GetHashCode();
      hash ^= translation_.GetHashCode();
      if (mesh_ != null) hash ^= Mesh.GetHashCode();
      if (skin_ != null) hash ^= Skin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      children_.WriteTo(output, _repeated_children_codec);
      matrix_.WriteTo(output, _repeated_matrix_codec);
      rotation_.WriteTo(output, _repeated_rotation_codec);
      scale_.WriteTo(output, _repeated_scale_codec);
      translation_.WriteTo(output, _repeated_translation_codec);
      if (mesh_ != null) {
        _single_mesh_codec.WriteTagAndValue(output, Mesh);
      }
      if (skin_ != null) {
        _single_skin_codec.WriteTagAndValue(output, Skin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      size += matrix_.CalculateSize(_repeated_matrix_codec);
      size += rotation_.CalculateSize(_repeated_rotation_codec);
      size += scale_.CalculateSize(_repeated_scale_codec);
      size += translation_.CalculateSize(_repeated_translation_codec);
      if (mesh_ != null) {
        size += _single_mesh_codec.CalculateSizeWithTag(Mesh);
      }
      if (skin_ != null) {
        size += _single_skin_codec.CalculateSizeWithTag(Skin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      children_.Add(other.children_);
      matrix_.Add(other.matrix_);
      rotation_.Add(other.rotation_);
      scale_.Add(other.scale_);
      translation_.Add(other.translation_);
      if (other.mesh_ != null) {
        if (mesh_ == null || other.Mesh != 0) {
          Mesh = other.Mesh;
        }
      }
      if (other.skin_ != null) {
        if (skin_ == null || other.Skin != 0) {
          Skin = other.Skin;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 26:
          case 29: {
            matrix_.AddEntriesFrom(input, _repeated_matrix_codec);
            break;
          }
          case 34:
          case 37: {
            rotation_.AddEntriesFrom(input, _repeated_rotation_codec);
            break;
          }
          case 42:
          case 45: {
            scale_.AddEntriesFrom(input, _repeated_scale_codec);
            break;
          }
          case 50:
          case 53: {
            translation_.AddEntriesFrom(input, _repeated_translation_codec);
            break;
          }
          case 58: {
            int? value = _single_mesh_codec.Read(input);
            if (mesh_ == null || value != 0) {
              Mesh = value;
            }
            break;
          }
          case 66: {
            int? value = _single_skin_codec.Read(input);
            if (skin_ == null || value != 0) {
              Skin = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/sampler.schema.json
  /// </summary>
  public sealed partial class Sampler : pb::IMessage<Sampler> {
    private static readonly pb::MessageParser<Sampler> _parser = new pb::MessageParser<Sampler>(() => new Sampler());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sampler> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sampler() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sampler(Sampler other) : this() {
      MagFilter = other.MagFilter;
      MinFilter = other.MinFilter;
      WrapS = other.WrapS;
      WrapT = other.WrapT;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sampler Clone() {
      return new Sampler(this);
    }

    /// <summary>Field number for the "magFilter" field.</summary>
    public const int MagFilterFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_magFilter_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? magFilter_;
    /// <summary>
    /// enum FilterType {
    ///   FILTER_UNKNOWN = 0;
    ///   NEAREST = 9728;
    ///   LINEAR = 9729;
    ///   NEAREST_MIPMAP_NEAREST = 9984;
    ///   LINEAR_MIPMAP_NEAREST = 9985;
    ///   NEAREST_MIPMAP_LINEAR = 9986;
    ///   LINEAR_MIPMAP_LINEAR = 9987;
    /// }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? MagFilter {
      get { return magFilter_; }
      set {
        magFilter_ = value;
      }
    }


    /// <summary>Field number for the "minFilter" field.</summary>
    public const int MinFilterFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_minFilter_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? minFilter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? MinFilter {
      get { return minFilter_; }
      set {
        minFilter_ = value;
      }
    }


    /// <summary>Field number for the "wrapS" field.</summary>
    public const int WrapSFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_wrapS_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? wrapS_;
    /// <summary>
    /// enum WrapType {
    ///   WRAP_UNKNWON = 0;
    ///   CLAMP_TO_EDGE = 33071;
    ///   MIRRORED_REPEAT = 33648;
    ///   REPEAT = 10497;
    /// }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? WrapS {
      get { return wrapS_; }
      set {
        wrapS_ = value;
      }
    }


    /// <summary>Field number for the "wrapT" field.</summary>
    public const int WrapTFieldNumber = 4;
    private static readonly pb::FieldCodec<int?> _single_wrapT_codec = pb::FieldCodec.ForStructWrapper<int>(34);
    private int? wrapT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? WrapT {
      get { return wrapT_; }
      set {
        wrapT_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sampler);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sampler other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MagFilter != other.MagFilter) return false;
      if (MinFilter != other.MinFilter) return false;
      if (WrapS != other.WrapS) return false;
      if (WrapT != other.WrapT) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (magFilter_ != null) hash ^= MagFilter.GetHashCode();
      if (minFilter_ != null) hash ^= MinFilter.GetHashCode();
      if (wrapS_ != null) hash ^= WrapS.GetHashCode();
      if (wrapT_ != null) hash ^= WrapT.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (magFilter_ != null) {
        _single_magFilter_codec.WriteTagAndValue(output, MagFilter);
      }
      if (minFilter_ != null) {
        _single_minFilter_codec.WriteTagAndValue(output, MinFilter);
      }
      if (wrapS_ != null) {
        _single_wrapS_codec.WriteTagAndValue(output, WrapS);
      }
      if (wrapT_ != null) {
        _single_wrapT_codec.WriteTagAndValue(output, WrapT);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (magFilter_ != null) {
        size += _single_magFilter_codec.CalculateSizeWithTag(MagFilter);
      }
      if (minFilter_ != null) {
        size += _single_minFilter_codec.CalculateSizeWithTag(MinFilter);
      }
      if (wrapS_ != null) {
        size += _single_wrapS_codec.CalculateSizeWithTag(WrapS);
      }
      if (wrapT_ != null) {
        size += _single_wrapT_codec.CalculateSizeWithTag(WrapT);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sampler other) {
      if (other == null) {
        return;
      }
      if (other.magFilter_ != null) {
        if (magFilter_ == null || other.MagFilter != 0) {
          MagFilter = other.MagFilter;
        }
      }
      if (other.minFilter_ != null) {
        if (minFilter_ == null || other.MinFilter != 0) {
          MinFilter = other.MinFilter;
        }
      }
      if (other.wrapS_ != null) {
        if (wrapS_ == null || other.WrapS != 0) {
          WrapS = other.WrapS;
        }
      }
      if (other.wrapT_ != null) {
        if (wrapT_ == null || other.WrapT != 0) {
          WrapT = other.WrapT;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_magFilter_codec.Read(input);
            if (magFilter_ == null || value != 0) {
              MagFilter = value;
            }
            break;
          }
          case 18: {
            int? value = _single_minFilter_codec.Read(input);
            if (minFilter_ == null || value != 0) {
              MinFilter = value;
            }
            break;
          }
          case 26: {
            int? value = _single_wrapS_codec.Read(input);
            if (wrapS_ == null || value != 0) {
              WrapS = value;
            }
            break;
          }
          case 34: {
            int? value = _single_wrapT_codec.Read(input);
            if (wrapT_ == null || value != 0) {
              WrapT = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/scene.schema.json
  /// </summary>
  public sealed partial class Scene : pb::IMessage<Scene> {
    private static readonly pb::MessageParser<Scene> _parser = new pb::MessageParser<Scene>(() => new Scene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene(Scene other) : this() {
      nodes_ = other.nodes_.Clone();
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene Clone() {
      return new Scene(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_nodes_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> nodes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scene other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/skin.schema.json
  /// "required": [ "joints" ]
  /// </summary>
  public sealed partial class Skin : pb::IMessage<Skin> {
    private static readonly pb::MessageParser<Skin> _parser = new pb::MessageParser<Skin>(() => new Skin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Skin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skin(Skin other) : this() {
      InverseBindMatrices = other.InverseBindMatrices;
      Skeleton = other.Skeleton;
      joints_ = other.joints_.Clone();
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skin Clone() {
      return new Skin(this);
    }

    /// <summary>Field number for the "inverseBindMatrices" field.</summary>
    public const int InverseBindMatricesFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_inverseBindMatrices_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? inverseBindMatrices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? InverseBindMatrices {
      get { return inverseBindMatrices_; }
      set {
        inverseBindMatrices_ = value;
      }
    }


    /// <summary>Field number for the "skeleton" field.</summary>
    public const int SkeletonFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_skeleton_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? skeleton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Skeleton {
      get { return skeleton_; }
      set {
        skeleton_ = value;
      }
    }


    /// <summary>Field number for the "joints" field.</summary>
    public const int JointsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_joints_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> joints_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Joints {
      get { return joints_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Skin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Skin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InverseBindMatrices != other.InverseBindMatrices) return false;
      if (Skeleton != other.Skeleton) return false;
      if(!joints_.Equals(other.joints_)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (inverseBindMatrices_ != null) hash ^= InverseBindMatrices.GetHashCode();
      if (skeleton_ != null) hash ^= Skeleton.GetHashCode();
      hash ^= joints_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (inverseBindMatrices_ != null) {
        _single_inverseBindMatrices_codec.WriteTagAndValue(output, InverseBindMatrices);
      }
      if (skeleton_ != null) {
        _single_skeleton_codec.WriteTagAndValue(output, Skeleton);
      }
      joints_.WriteTo(output, _repeated_joints_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (inverseBindMatrices_ != null) {
        size += _single_inverseBindMatrices_codec.CalculateSizeWithTag(InverseBindMatrices);
      }
      if (skeleton_ != null) {
        size += _single_skeleton_codec.CalculateSizeWithTag(Skeleton);
      }
      size += joints_.CalculateSize(_repeated_joints_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Skin other) {
      if (other == null) {
        return;
      }
      if (other.inverseBindMatrices_ != null) {
        if (inverseBindMatrices_ == null || other.InverseBindMatrices != 0) {
          InverseBindMatrices = other.InverseBindMatrices;
        }
      }
      if (other.skeleton_ != null) {
        if (skeleton_ == null || other.Skeleton != 0) {
          Skeleton = other.Skeleton;
        }
      }
      joints_.Add(other.joints_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_inverseBindMatrices_codec.Read(input);
            if (inverseBindMatrices_ == null || value != 0) {
              InverseBindMatrices = value;
            }
            break;
          }
          case 18: {
            int? value = _single_skeleton_codec.Read(input);
            if (skeleton_ == null || value != 0) {
              Skeleton = value;
            }
            break;
          }
          case 26:
          case 24: {
            joints_.AddEntriesFrom(input, _repeated_joints_codec);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/texture.schema.json
  /// </summary>
  public sealed partial class Texture : pb::IMessage<Texture> {
    private static readonly pb::MessageParser<Texture> _parser = new pb::MessageParser<Texture>(() => new Texture());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Texture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Texture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Texture(Texture other) : this() {
      Sampler = other.Sampler;
      Source = other.Source;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Texture Clone() {
      return new Texture(this);
    }

    /// <summary>Field number for the "sampler" field.</summary>
    public const int SamplerFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_sampler_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? sampler_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Sampler {
      get { return sampler_; }
      set {
        sampler_ = value;
      }
    }


    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_source_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }


    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Texture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Texture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sampler != other.Sampler) return false;
      if (Source != other.Source) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sampler_ != null) hash ^= Sampler.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sampler_ != null) {
        _single_sampler_codec.WriteTagAndValue(output, Sampler);
      }
      if (source_ != null) {
        _single_source_codec.WriteTagAndValue(output, Source);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sampler_ != null) {
        size += _single_sampler_codec.CalculateSizeWithTag(Sampler);
      }
      if (source_ != null) {
        size += _single_source_codec.CalculateSizeWithTag(Source);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Texture other) {
      if (other == null) {
        return;
      }
      if (other.sampler_ != null) {
        if (sampler_ == null || other.Sampler != 0) {
          Sampler = other.Sampler;
        }
      }
      if (other.source_ != null) {
        if (source_ == null || other.Source != 0) {
          Source = other.Source;
        }
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_sampler_codec.Read(input);
            if (sampler_ == null || value != 0) {
              Sampler = value;
            }
            break;
          }
          case 18: {
            int? value = _single_source_codec.Read(input);
            if (source_ == null || value != 0) {
              Source = value;
            }
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/textureInfo.schema.json
  /// "required": [ "index" ]
  /// </summary>
  public sealed partial class TextureInfo : pb::IMessage<TextureInfo> {
    private static readonly pb::MessageParser<TextureInfo> _parser = new pb::MessageParser<TextureInfo>(() => new TextureInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextureInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextureInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextureInfo(TextureInfo other) : this() {
      Index = other.Index;
      TexCoord = other.TexCoord;
      extensions_ = other.extensions_ != null ? other.extensions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextureInfo Clone() {
      return new TextureInfo(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_index_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }


    /// <summary>Field number for the "texCoord" field.</summary>
    public const int TexCoordFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_texCoord_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? texCoord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? TexCoord {
      get { return texCoord_; }
      set {
        texCoord_ = value;
      }
    }


    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 3;
    private global::VrmProtobuf.TextureInfo.Types.Extensions extensions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.TextureInfo.Types.Extensions Extensions {
      get { return extensions_; }
      set {
        extensions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextureInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextureInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (TexCoord != other.TexCoord) return false;
      if (!object.Equals(Extensions, other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (index_ != null) hash ^= Index.GetHashCode();
      if (texCoord_ != null) hash ^= TexCoord.GetHashCode();
      if (extensions_ != null) hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (index_ != null) {
        _single_index_codec.WriteTagAndValue(output, Index);
      }
      if (texCoord_ != null) {
        _single_texCoord_codec.WriteTagAndValue(output, TexCoord);
      }
      if (extensions_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Extensions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (index_ != null) {
        size += _single_index_codec.CalculateSizeWithTag(Index);
      }
      if (texCoord_ != null) {
        size += _single_texCoord_codec.CalculateSizeWithTag(TexCoord);
      }
      if (extensions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extensions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextureInfo other) {
      if (other == null) {
        return;
      }
      if (other.index_ != null) {
        if (index_ == null || other.Index != 0) {
          Index = other.Index;
        }
      }
      if (other.texCoord_ != null) {
        if (texCoord_ == null || other.TexCoord != 0) {
          TexCoord = other.TexCoord;
        }
      }
      if (other.extensions_ != null) {
        if (extensions_ == null) {
          Extensions = new global::VrmProtobuf.TextureInfo.Types.Extensions();
        }
        Extensions.MergeFrom(other.Extensions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_index_codec.Read(input);
            if (index_ == null || value != 0) {
              Index = value;
            }
            break;
          }
          case 18: {
            int? value = _single_texCoord_codec.Read(input);
            if (texCoord_ == null || value != 0) {
              TexCoord = value;
            }
            break;
          }
          case 26: {
            if (extensions_ == null) {
              Extensions = new global::VrmProtobuf.TextureInfo.Types.Extensions();
            }
            input.ReadMessage(Extensions);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TextureInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Extensions : pb::IMessage<Extensions> {
        private static readonly pb::MessageParser<Extensions> _parser = new pb::MessageParser<Extensions>(() => new Extensions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Extensions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VrmProtobuf.TextureInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extensions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extensions(Extensions other) : this() {
          kHRTextureTransform_ = other.kHRTextureTransform_ != null ? other.kHRTextureTransform_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Extensions Clone() {
          return new Extensions(this);
        }

        /// <summary>Field number for the "KHR_texture_transform" field.</summary>
        public const int KHRTextureTransformFieldNumber = 1;
        private global::VrmProtobuf.KHRTextureTransformExtension kHRTextureTransform_;
        /// <summary>
        /// KHR_texture_transform
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VrmProtobuf.KHRTextureTransformExtension KHRTextureTransform {
          get { return kHRTextureTransform_; }
          set {
            kHRTextureTransform_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Extensions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Extensions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(KHRTextureTransform, other.KHRTextureTransform)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (kHRTextureTransform_ != null) hash ^= KHRTextureTransform.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (kHRTextureTransform_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(KHRTextureTransform);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (kHRTextureTransform_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(KHRTextureTransform);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Extensions other) {
          if (other == null) {
            return;
          }
          if (other.kHRTextureTransform_ != null) {
            if (kHRTextureTransform_ == null) {
              KHRTextureTransform = new global::VrmProtobuf.KHRTextureTransformExtension();
            }
            KHRTextureTransform.MergeFrom(other.KHRTextureTransform);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (kHRTextureTransform_ == null) {
                  KHRTextureTransform = new global::VrmProtobuf.KHRTextureTransformExtension();
                }
                input.ReadMessage(KHRTextureTransform);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_transform/schema/KHR_texture_transform.textureInfo.schema.json
  /// </summary>
  public sealed partial class KHRTextureTransformExtension : pb::IMessage<KHRTextureTransformExtension> {
    private static readonly pb::MessageParser<KHRTextureTransformExtension> _parser = new pb::MessageParser<KHRTextureTransformExtension>(() => new KHRTextureTransformExtension());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KHRTextureTransformExtension> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KHRTextureTransformExtension() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KHRTextureTransformExtension(KHRTextureTransformExtension other) : this() {
      offset_ = other.offset_.Clone();
      Rotation = other.Rotation;
      scale_ = other.scale_.Clone();
      TexCoord = other.TexCoord;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KHRTextureTransformExtension Clone() {
      return new KHRTextureTransformExtension(this);
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_offset_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> offset_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// float[2]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Offset {
      get { return offset_; }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private static readonly pb::FieldCodec<float?> _single_rotation_codec = pb::FieldCodec.ForStructWrapper<float>(18);
    private float? rotation_;
    /// <summary>
    /// Rotate the UVs by this many radians counter-clockwise around the origin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }


    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_scale_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> scale_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// float[2]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Scale {
      get { return scale_; }
    }

    /// <summary>Field number for the "texCoord" field.</summary>
    public const int TexCoordFieldNumber = 4;
    private static readonly pb::FieldCodec<int?> _single_texCoord_codec = pb::FieldCodec.ForStructWrapper<int>(34);
    private int? texCoord_;
    /// <summary>
    /// Overrides the textureInfo texCoord value if supplied, and if this extension
    /// is supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? TexCoord {
      get { return texCoord_; }
      set {
        texCoord_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KHRTextureTransformExtension);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KHRTextureTransformExtension other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!offset_.Equals(other.offset_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
      if(!scale_.Equals(other.scale_)) return false;
      if (TexCoord != other.TexCoord) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= offset_.GetHashCode();
      if (rotation_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Rotation);
      hash ^= scale_.GetHashCode();
      if (texCoord_ != null) hash ^= TexCoord.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      offset_.WriteTo(output, _repeated_offset_codec);
      if (rotation_ != null) {
        _single_rotation_codec.WriteTagAndValue(output, Rotation);
      }
      scale_.WriteTo(output, _repeated_scale_codec);
      if (texCoord_ != null) {
        _single_texCoord_codec.WriteTagAndValue(output, TexCoord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += offset_.CalculateSize(_repeated_offset_codec);
      if (rotation_ != null) {
        size += _single_rotation_codec.CalculateSizeWithTag(Rotation);
      }
      size += scale_.CalculateSize(_repeated_scale_codec);
      if (texCoord_ != null) {
        size += _single_texCoord_codec.CalculateSizeWithTag(TexCoord);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KHRTextureTransformExtension other) {
      if (other == null) {
        return;
      }
      offset_.Add(other.offset_);
      if (other.rotation_ != null) {
        if (rotation_ == null || other.Rotation != 0F) {
          Rotation = other.Rotation;
        }
      }
      scale_.Add(other.scale_);
      if (other.texCoord_ != null) {
        if (texCoord_ == null || other.TexCoord != 0) {
          TexCoord = other.TexCoord;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            offset_.AddEntriesFrom(input, _repeated_offset_codec);
            break;
          }
          case 18: {
            float? value = _single_rotation_codec.Read(input);
            if (rotation_ == null || value != 0F) {
              Rotation = value;
            }
            break;
          }
          case 26:
          case 29: {
            scale_.AddEntriesFrom(input, _repeated_scale_codec);
            break;
          }
          case 34: {
            int? value = _single_texCoord_codec.Read(input);
            if (texCoord_ == null || value != 0) {
              TexCoord = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness/schema/glTF.KHR_materials_pbrSpecularGlossiness.schema.json
  /// </summary>
  public sealed partial class KHRMaterialsPbrSpecularGlossinessExtension : pb::IMessage<KHRMaterialsPbrSpecularGlossinessExtension> {
    private static readonly pb::MessageParser<KHRMaterialsPbrSpecularGlossinessExtension> _parser = new pb::MessageParser<KHRMaterialsPbrSpecularGlossinessExtension>(() => new KHRMaterialsPbrSpecularGlossinessExtension());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KHRMaterialsPbrSpecularGlossinessExtension> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.GlTFReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KHRMaterialsPbrSpecularGlossinessExtension() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KHRMaterialsPbrSpecularGlossinessExtension(KHRMaterialsPbrSpecularGlossinessExtension other) : this() {
      diffuseFactor_ = other.diffuseFactor_.Clone();
      diffuseTexture_ = other.diffuseTexture_ != null ? other.diffuseTexture_.Clone() : null;
      specularFactor_ = other.specularFactor_.Clone();
      GlossinessFactor = other.GlossinessFactor;
      specularGlossinessTexture_ = other.specularGlossinessTexture_ != null ? other.specularGlossinessTexture_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KHRMaterialsPbrSpecularGlossinessExtension Clone() {
      return new KHRMaterialsPbrSpecularGlossinessExtension(this);
    }

    /// <summary>Field number for the "diffuseFactor" field.</summary>
    public const int DiffuseFactorFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_diffuseFactor_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> diffuseFactor_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// float[4], default[1.0,1.0,1.0,1.0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> DiffuseFactor {
      get { return diffuseFactor_; }
    }

    /// <summary>Field number for the "diffuseTexture" field.</summary>
    public const int DiffuseTextureFieldNumber = 2;
    private global::VrmProtobuf.TextureInfo diffuseTexture_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.TextureInfo DiffuseTexture {
      get { return diffuseTexture_; }
      set {
        diffuseTexture_ = value;
      }
    }

    /// <summary>Field number for the "specularFactor" field.</summary>
    public const int SpecularFactorFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_specularFactor_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> specularFactor_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// float[3], default[1.0,1.0,1.0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> SpecularFactor {
      get { return specularFactor_; }
    }

    /// <summary>Field number for the "glossinessFactor" field.</summary>
    public const int GlossinessFactorFieldNumber = 4;
    private static readonly pb::FieldCodec<float?> _single_glossinessFactor_codec = pb::FieldCodec.ForStructWrapper<float>(34);
    private float? glossinessFactor_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? GlossinessFactor {
      get { return glossinessFactor_; }
      set {
        glossinessFactor_ = value;
      }
    }


    /// <summary>Field number for the "specularGlossinessTexture" field.</summary>
    public const int SpecularGlossinessTextureFieldNumber = 5;
    private global::VrmProtobuf.TextureInfo specularGlossinessTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.TextureInfo SpecularGlossinessTexture {
      get { return specularGlossinessTexture_; }
      set {
        specularGlossinessTexture_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KHRMaterialsPbrSpecularGlossinessExtension);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KHRMaterialsPbrSpecularGlossinessExtension other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!diffuseFactor_.Equals(other.diffuseFactor_)) return false;
      if (!object.Equals(DiffuseTexture, other.DiffuseTexture)) return false;
      if(!specularFactor_.Equals(other.specularFactor_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(GlossinessFactor, other.GlossinessFactor)) return false;
      if (!object.Equals(SpecularGlossinessTexture, other.SpecularGlossinessTexture)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= diffuseFactor_.GetHashCode();
      if (diffuseTexture_ != null) hash ^= DiffuseTexture.GetHashCode();
      hash ^= specularFactor_.GetHashCode();
      if (glossinessFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(GlossinessFactor);
      if (specularGlossinessTexture_ != null) hash ^= SpecularGlossinessTexture.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      diffuseFactor_.WriteTo(output, _repeated_diffuseFactor_codec);
      if (diffuseTexture_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DiffuseTexture);
      }
      specularFactor_.WriteTo(output, _repeated_specularFactor_codec);
      if (glossinessFactor_ != null) {
        _single_glossinessFactor_codec.WriteTagAndValue(output, GlossinessFactor);
      }
      if (specularGlossinessTexture_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SpecularGlossinessTexture);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += diffuseFactor_.CalculateSize(_repeated_diffuseFactor_codec);
      if (diffuseTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiffuseTexture);
      }
      size += specularFactor_.CalculateSize(_repeated_specularFactor_codec);
      if (glossinessFactor_ != null) {
        size += _single_glossinessFactor_codec.CalculateSizeWithTag(GlossinessFactor);
      }
      if (specularGlossinessTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpecularGlossinessTexture);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KHRMaterialsPbrSpecularGlossinessExtension other) {
      if (other == null) {
        return;
      }
      diffuseFactor_.Add(other.diffuseFactor_);
      if (other.diffuseTexture_ != null) {
        if (diffuseTexture_ == null) {
          DiffuseTexture = new global::VrmProtobuf.TextureInfo();
        }
        DiffuseTexture.MergeFrom(other.DiffuseTexture);
      }
      specularFactor_.Add(other.specularFactor_);
      if (other.glossinessFactor_ != null) {
        if (glossinessFactor_ == null || other.GlossinessFactor != 0F) {
          GlossinessFactor = other.GlossinessFactor;
        }
      }
      if (other.specularGlossinessTexture_ != null) {
        if (specularGlossinessTexture_ == null) {
          SpecularGlossinessTexture = new global::VrmProtobuf.TextureInfo();
        }
        SpecularGlossinessTexture.MergeFrom(other.SpecularGlossinessTexture);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            diffuseFactor_.AddEntriesFrom(input, _repeated_diffuseFactor_codec);
            break;
          }
          case 18: {
            if (diffuseTexture_ == null) {
              DiffuseTexture = new global::VrmProtobuf.TextureInfo();
            }
            input.ReadMessage(DiffuseTexture);
            break;
          }
          case 26:
          case 29: {
            specularFactor_.AddEntriesFrom(input, _repeated_specularFactor_codec);
            break;
          }
          case 34: {
            float? value = _single_glossinessFactor_codec.Read(input);
            if (glossinessFactor_ == null || value != 0F) {
              GlossinessFactor = value;
            }
            break;
          }
          case 42: {
            if (specularGlossinessTexture_ == null) {
              SpecularGlossinessTexture = new global::VrmProtobuf.TextureInfo();
            }
            input.ReadMessage(SpecularGlossinessTexture);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
